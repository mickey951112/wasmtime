test simple-gvn

function %commutative_binary(i32, i32) -> i32, i32 {
block0(v0: i32, v1: i32):
    v2 = iadd v0, v1
    v3 = iadd v1, v0
    return v2, v3
    ; check: v2 = iadd v0, v1
    ; check: return v2, v2
}

function %commutative_ternary(f32, f32, f32) -> f32, f32 {
block0(v0: f32, v1: f32, v2: f32):
    v3 = fma v0, v1, v2
    v4 = fma v1, v0, v2
    return v3, v4
    ; check: v3 = fma v0, v1, v2
    ; check: return v3, v3
}

function %commutative_icmp(i32, i32) -> i8, i8 {
block0(v0: i32, v1: i32):
    v2 = icmp ult v0, v1
    v3 = icmp ugt v1, v0
    return v2, v3
    ; check: v2 = icmp ult v0, v1
    ; check: return v2, v2
}

function %commutative_icmp_reflexive(i32, i32) -> i8, i8 {
block0(v0: i32, v1: i32):
    v2 = icmp ule v0, v0
    v3 = icmp uge v0, v0
    return v2, v3
    ; check: v2 = icmp ule v0, v0
    ; check: return v2, v2
}

function %commutative_fcmp(f32, f32) -> i8, i8 {
block0(v0: f32, v1: f32):
    v2 = fcmp lt v0, v1
    v3 = fcmp gt v1, v0
    return v2, v3
    ; check: v2 = fcmp lt v0, v1
    ; check: return v2, v2
}

function %commutative_fcmp_reflexive(f32, f32) -> i8, i8 {
block0(v0: f32, v1: f32):
    v2 = fcmp ule v0, v0
    v3 = fcmp uge v0, v0
    return v2, v3
    ; check: v2 = fcmp ule v0, v0
    ; check: return v2, v2
}
