test interpret
test run
target aarch64
target s390x
target riscv64

function %bmask_i64_i64(i64) -> i64 {
block0(v0: i64):
  v1 = bmask.i64 v0
  return v1
}
; run: %bmask_i64_i64(1) == -1
; run: %bmask_i64_i64(0) == 0

function %bmask_i64_i32(i64) -> i32 {
block0(v0: i64):
  v1 = bmask.i32 v0
  return v1
}
; run: %bmask_i64_i32(1) == -1
; run: %bmask_i64_i32(0) == 0

function %bmask_i64_i16(i64) -> i16 {
block0(v0: i64):
  v1 = bmask.i16 v0
  return v1
}
; run: %bmask_i64_i16(1) == -1
; run: %bmask_i64_i16(0) == 0

function %bmask_i64_i8(i64) -> i8 {
block0(v0: i64):
  v1 = bmask.i8 v0
  return v1
}
; run: %bmask_i64_i8(1) == -1
; run: %bmask_i64_i8(0) == 0

function %bmask_i32_i64(i32) -> i64 {
block0(v0: i32):
  v1 = bmask.i64 v0
  return v1
}
; run: %bmask_i32_i64(1) == -1
; run: %bmask_i32_i64(0) == 0

function %bmask_i32_i32(i32) -> i32 {
block0(v0: i32):
  v1 = bmask.i32 v0
  return v1
}
; run: %bmask_i32_i32(1) == -1
; run: %bmask_i32_i32(0) == 0

function %bmask_i32_i16(i32) -> i16 {
block0(v0: i32):
  v1 = bmask.i16 v0
  return v1
}
; run: %bmask_i32_i16(1) == -1
; run: %bmask_i32_i16(0) == 0

function %bmask_i32_i8(i32) -> i8 {
block0(v0: i32):
  v1 = bmask.i8 v0
  return v1
}
; run: %bmask_i32_i8(1) == -1
; run: %bmask_i32_i8(0) == 0

function %bmask_i16_i64(i16) -> i64 {
block0(v0: i16):
  v1 = bmask.i64 v0
  return v1
}
; run: %bmask_i16_i64(1) == -1
; run: %bmask_i16_i64(0) == 0

function %bmask_i16_i32(i16) -> i32 {
block0(v0: i16):
  v1 = bmask.i32 v0
  return v1
}
; run: %bmask_i16_i32(1) == -1
; run: %bmask_i16_i32(0) == 0

function %bmask_i16_i16(i16) -> i16 {
block0(v0: i16):
  v1 = bmask.i16 v0
  return v1
}
; run: %bmask_i16_i16(1) == -1
; run: %bmask_i16_i16(0) == 0

function %bmask_i16_i8(i16) -> i8 {
block0(v0: i16):
  v1 = bmask.i8 v0
  return v1
}
; run: %bmask_i16_i8(1) == -1
; run: %bmask_i16_i8(0) == 0

function %bmask_i8_i64(i8) -> i64 {
block0(v0: i8):
  v1 = bmask.i64 v0
  return v1
}
; run: %bmask_i8_i64(1) == -1
; run: %bmask_i8_i64(0) == 0

function %bmask_i8_i32(i8) -> i32 {
block0(v0: i8):
  v1 = bmask.i32 v0
  return v1
}
; run: %bmask_i8_i32(1) == -1
; run: %bmask_i8_i32(0) == 0

function %bmask_i8_i16(i8) -> i16 {
block0(v0: i8):
  v1 = bmask.i16 v0
  return v1
}
; run: %bmask_i8_i16(1) == -1
; run: %bmask_i8_i16(0) == 0

function %bmask_i8_i8(i8) -> i8 {
block0(v0: i8):
  v1 = bmask.i8 v0
  return v1
}
; run: %bmask_i8_i8(1) == -1
; run: %bmask_i8_i8(0) == 0
