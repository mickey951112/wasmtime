test preopt
target aarch64
target x86_64

function %brz_fold() -> i32 {
block0:
    v0 = iconst.i8 0
    brz v0, block2
    jump block1
block1:
    v1 = iconst.i32 42
    return v1
block2:
    v2 = iconst.i32 24
    return v2
}
; sameln: function %brz_fold
; nextln: block0:
; nextln:     v0 = iconst.i8 0
; nextln:     jump block2
; nextln: 
; nextln: block1:
; nextln:     v1 = iconst.i32 42
; nextln:     return v1
; nextln: 
; nextln: block2:
; nextln:     v2 = iconst.i32 24
; nextln:     return v2
; nextln: }

function %brnz_fold() -> i32 {
block0:
    v0 = iconst.i8 1
    brnz v0, block2
    jump block1
block1:
    v1 = iconst.i32 42
    return v1
block2:
    v2 = iconst.i32 24
    return v2
}
; sameln: function %brnz_fold
; nextln: block0:
; nextln:     v0 = iconst.i8 1
; nextln:     jump block2
; nextln: 
; nextln: block1:
; nextln:     v1 = iconst.i32 42
; nextln:     return v1
; nextln: 
; nextln: block2:
; nextln:     v2 = iconst.i32 24
; nextln:     return v2
; nextln: }

function %brz_fold_param(i8) -> i32 {
block0(v0: i8):
    brz v0, block2
    jump block1
block1:
    v1 = iconst.i32 42
    return v1
block2:
    v2 = iconst.i32 24
    return v2
}
; sameln: function %brz_fold_param(i8) -> i32 fast {
; nextln: block0(v0: i8):
; nextln:     brz v0, block2
; nextln:     jump block1
; nextln: 
; nextln: block1:
; nextln:     v1 = iconst.i32 42
; nextln:     return v1
; nextln: 
; nextln: block2:
; nextln:     v2 = iconst.i32 24
; nextln:     return v2
; nextln: }
