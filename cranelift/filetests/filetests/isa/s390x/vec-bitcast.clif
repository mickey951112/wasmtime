test compile precise-output
target s390x

;; Vector bitcast is a no-op if the lane count remains unchanged,
;; or if the ABI lane-order matches the specified byte order.
;; Otherwise, lane-swaps need to happen.

function %bitcast_i64x2_i32x4(i64x2) -> i32x4 {
block0(v0: i64x2):
  v1 = bitcast.i32x4 big v0
  return v1
}

; block0:
;   br %r14

function %bitcast_i64x2_i32x4(i64x2) -> i32x4 {
block0(v0: i64x2):
  v1 = bitcast.i32x4 little v0
  return v1
}

; block0:
;   vpdi %v3, %v24, %v24, 4
;   vpdi %v5, %v3, %v3, 4
;   verllg %v24, %v5, 32
;   br %r14

function %bitcast_i64x2_i32x4(i64x2) -> i32x4 wasmtime_system_v {
block0(v0: i64x2):
  v1 = bitcast.i32x4 big v0
  return v1
}

; block0:
;   vpdi %v3, %v24, %v24, 4
;   vpdi %v5, %v3, %v3, 4
;   verllg %v24, %v5, 32
;   br %r14

function %bitcast_i64x2_i32x4(i64x2) -> i32x4 wasmtime_system_v {
block0(v0: i64x2):
  v1 = bitcast.i32x4 little v0
  return v1
}

; block0:
;   br %r14

function %bitcast_i64x2_f64x2(i64x2) -> f64x2 {
block0(v0: i64x2):
  v1 = bitcast.f64x2 big v0
  return v1
}

; block0:
;   br %r14

function %bitcast_i64x2_f64x2(i64x2) -> f64x2 {
block0(v0: i64x2):
  v1 = bitcast.f64x2 little v0
  return v1
}

; block0:
;   br %r14

function %bitcast_i64x2_f64x2(i64x2) -> f64x2 wasmtime_system_v {
block0(v0: i64x2):
  v1 = bitcast.f64x2 big v0
  return v1
}

; block0:
;   br %r14

