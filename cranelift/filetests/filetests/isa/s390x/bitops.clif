test compile precise-output
target s390x

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BITREV
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; FIXME: bitrev not yet implemented

;function %bitrev_i64(i64) -> i64 {
;block0(v0: i64):
;    v1 = bitrev v0
;    return v1
;}
;
;function %bitrev_i32(i32) -> i32 {
;block0(v0: i32):
;    v1 = bitrev v0
;    return v1
;}
;
;function %bitrev_i16(i16) -> i16 {
;block0(v0: i16):
;    v1 = bitrev v0
;    return v1
;}
;
;function %bitrev_i8(i8) -> i8 {
;block0(v0: i8):
;    v1 = bitrev v0
;    return v1
;}
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CLZ
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %clz_i64(i64) -> i64 {
block0(v0: i64):
    v1 = clz v0
    return v1
}

; block0:
;   flogr %r0, %r2
;   lgr %r2, %r0
;   br %r14

function %clz_i32(i32) -> i32 {
block0(v0: i32):
    v1 = clz v0
    return v1
}

; block0:
;   llgfr %r5, %r2
;   flogr %r0, %r5
;   ahik %r2, %r0, -32
;   br %r14

function %clz_i16(i16) -> i16 {
block0(v0: i16):
    v1 = clz v0
    return v1
}

; block0:
;   llghr %r5, %r2
;   flogr %r0, %r5
;   ahik %r2, %r0, -48
;   br %r14

function %clz_i8(i8) -> i8 {
block0(v0: i8):
    v1 = clz v0
    return v1
}

; block0:
;   llgcr %r5, %r2
;   flogr %r0, %r5
;   ahik %r2, %r0, -56
;   br %r14

function %cls_i64(i64) -> i64 {
block0(v0: i64):
    v1 = cls v0
    return v1
}

; block0:
;   srag %r5, %r2, 63
;   xgrk %r3, %r2, %r5
;   flogr %r0, %r3
;   aghik %r2, %r0, -1
;   br %r14

function %cls_i32(i32) -> i32 {
block0(v0: i32):
    v1 = cls v0
    return v1
}

; block0:
;   lgfr %r5, %r2
;   srag %r3, %r5, 63
;   xgr %r5, %r3
;   flogr %r0, %r5
;   ahik %r2, %r0, -33
;   br %r14

function %cls_i16(i16) -> i16 {
block0(v0: i16):
    v1 = cls v0
    return v1
}

; block0:
;   lghr %r5, %r2
;   srag %r3, %r5, 63
;   xgr %r5, %r3
;   flogr %r0, %r5
;   ahik %r2, %r0, -49
;   br %r14

function %cls_i8(i8) -> i8 {
block0(v0: i8):
    v1 = cls v0
    return v1
}

; block0:
;   lgbr %r5, %r2
;   srag %r3, %r5, 63
;   xgr %r5, %r3
;   flogr %r0, %r5
;   ahik %r2, %r0, -57
;   br %r14

function %ctz_i64(i64) -> i64 {
block0(v0: i64):
    v1 = ctz v0
    return v1
}

; block0:
;   lcgr %r5, %r2
;   ngrk %r3, %r2, %r5
;   flogr %r0, %r3
;   locghie %r0, -1
;   lghi %r3, 63
;   sgrk %r2, %r3, %r0
;   br %r14

function %ctz_i32(i32) -> i32 {
block0(v0: i32):
    v1 = ctz v0
    return v1
}

; block0:
;   oihl %r2, 1
;   lcgr %r4, %r2
;   ngr %r2, %r4
;   flogr %r0, %r2
;   lhi %r5, 63
;   srk %r2, %r5, %r0
;   br %r14

function %ctz_i16(i16) -> i16 {
block0(v0: i16):
    v1 = ctz v0
    return v1
}

; block0:
;   oilh %r2, 1
;   lcgr %r4, %r2
;   ngr %r2, %r4
;   flogr %r0, %r2
;   lhi %r5, 63
;   srk %r2, %r5, %r0
;   br %r14

function %ctz_i8(i8) -> i8 {
block0(v0: i8):
    v1 = ctz v0
    return v1
}

; block0:
;   oill %r2, 256
;   lcgr %r4, %r2
;   ngr %r2, %r4
;   flogr %r0, %r2
;   lhi %r5, 63
;   srk %r2, %r5, %r0
;   br %r14

function %popcnt_i64(i64) -> i64 {
block0(v0: i64):
    v1 = popcnt v0
    return v1
}

; block0:
;   popcnt %r5, %r2
;   sllg %r3, %r5, 32
;   agr %r5, %r3
;   sllg %r3, %r5, 16
;   agr %r5, %r3
;   sllg %r3, %r5, 8
;   agr %r5, %r3
;   srlg %r2, %r5, 56
;   br %r14

function %popcnt_i32(i32) -> i32 {
block0(v0: i32):
    v1 = popcnt v0
    return v1
}

; block0:
;   popcnt %r5, %r2
;   sllk %r3, %r5, 16
;   ar %r5, %r3
;   sllk %r3, %r5, 8
;   ar %r5, %r3
;   srlk %r2, %r5, 24
;   br %r14

function %popcnt_i16(i16) -> i16 {
block0(v0: i16):
    v1 = popcnt v0
    return v1
}

; block0:
;   popcnt %r5, %r2
;   srlk %r3, %r5, 8
;   ark %r2, %r5, %r3
;   nill %r2, 255
;   br %r14

function %popcnt_i8(i8) -> i8 {
block0(v0: i8):
    v1 = popcnt v0
    return v1
}

; block0:
;   popcnt %r2, %r2
;   br %r14

