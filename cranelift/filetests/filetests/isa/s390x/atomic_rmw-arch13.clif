test compile precise-output
target s390x arch13

function %atomic_rmw_nand_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = atomic_rmw.i64 nand v1, v2
  return v3
}

; block0:
;   lg %r0, 0(%r3)
;   0: nngrk %r1, %r0, %r4 ; csg %r0, %r1, 0(%r3) ; jglh 0b ; 1:
;   lgr %r2, %r0
;   br %r14

function %atomic_rmw_nand_i32(i64, i64, i32) -> i32 {
block0(v0: i64, v1: i64, v2: i32):
  v3 = atomic_rmw.i32 nand v1, v2
  return v3
}

; block0:
;   l %r0, 0(%r3)
;   0: nnrk %r1, %r0, %r4 ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
;   lgr %r2, %r0
;   br %r14

function %atomic_rmw_nand_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 nand v1, v2
  return v3
}

; block0:
;   sllk %r5, %r3, 3
;   nill %r3, 65532
;   l %r0, 0(%r3)
;   0: rll %r1, %r0, 0(%r5) ; rnsbg %r1, %r4, 32, 48, 16 ; xilf %r1, 4294901760 ; rll %r1, %r1, 0(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
;   rll %r2, %r0, 16(%r5)
;   br %r14

function %atomic_rmw_nand_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 nand v1, v2
  return v3
}

; block0:
;   sllk %r5, %r3, 3
;   nill %r3, 65532
;   lcr %r2, %r5
;   l %r0, 0(%r3)
;   0: rll %r1, %r0, 0(%r5) ; rnsbg %r1, %r4, 32, 40, 24 ; xilf %r1, 4278190080 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
;   rll %r2, %r0, 8(%r5)
;   br %r14

function %atomic_rmw_nand_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = atomic_rmw.i64 little nand v1, v2
  return v3
}

; block0:
;   lrvgr %r5, %r4
;   lg %r0, 0(%r3)
;   0: nngrk %r1, %r0, %r5 ; csg %r0, %r1, 0(%r3) ; jglh 0b ; 1:
;   lrvgr %r2, %r0
;   br %r14

function %atomic_rmw_nand_i32(i64, i64, i32) -> i32 {
block0(v0: i64, v1: i64, v2: i32):
  v3 = atomic_rmw.i32 little nand v1, v2
  return v3
}

; block0:
;   lrvr %r5, %r4
;   l %r0, 0(%r3)
;   0: nnrk %r1, %r0, %r5 ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
;   lrvr %r2, %r0
;   br %r14

function %atomic_rmw_nand_i16(i64, i64, i16) -> i16 {
block0(v0: i64, v1: i64, v2: i16):
  v3 = atomic_rmw.i16 little nand v1, v2
  return v3
}

; block0:
;   sllk %r5, %r3, 3
;   nill %r3, 65532
;   lrvr %r2, %r4
;   l %r0, 0(%r3)
;   0: rll %r1, %r0, 16(%r5) ; rnsbg %r1, %r2, 48, 64, 48 ; xilf %r1, 65535 ; rll %r1, %r1, 16(%r5) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
;   rll %r2, %r0, 0(%r5)
;   lrvr %r2, %r2
;   br %r14

function %atomic_rmw_nand_i8(i64, i64, i8) -> i8 {
block0(v0: i64, v1: i64, v2: i8):
  v3 = atomic_rmw.i8 little nand v1, v2
  return v3
}

; block0:
;   sllk %r5, %r3, 3
;   nill %r3, 65532
;   lcr %r2, %r5
;   l %r0, 0(%r3)
;   0: rll %r1, %r0, 0(%r5) ; rnsbg %r1, %r4, 32, 40, 24 ; xilf %r1, 4278190080 ; rll %r1, %r1, 0(%r2) ; cs %r0, %r1, 0(%r3) ; jglh 0b ; 1:
;   rll %r2, %r0, 8(%r5)
;   br %r14

