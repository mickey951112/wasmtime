test compile precise-output
target s390x

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; F32CONST/F64CONST
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; FIXME: should use FZERO instruction
; FIXME: should use out-of-line literal pool

function %f32const_zero() -> f32 {
block0:
  v1 = f32const 0x0.0
  return v1
}

; block0:
;   bras %r1, 8 ; data.f32 0 ; le %f0, 0(%r1)
;   br %r14

function %f64const_zero() -> f64 {
block0:
  v1 = f64const 0x0.0
  return v1
}

; block0:
;   bras %r1, 12 ; data.f64 0 ; ld %f0, 0(%r1)
;   br %r14

function %f32const_one() -> f32 {
block0:
  v1 = f32const 0x1.0
  return v1
}

; block0:
;   bras %r1, 8 ; data.f32 1 ; le %f0, 0(%r1)
;   br %r14

function %f64const_one() -> f64 {
block0:
  v1 = f64const 0x1.0
  return v1
}

; block0:
;   bras %r1, 12 ; data.f64 1 ; ld %f0, 0(%r1)
;   br %r14

function %fadd_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fadd v0, v1
  return v2
}

; block0:
;   aebr %f0, %f2
;   br %r14

function %fadd_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fadd v0, v1
  return v2
}

; block0:
;   adbr %f0, %f2
;   br %r14

function %fsub_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fsub v0, v1
  return v2
}

; block0:
;   sebr %f0, %f2
;   br %r14

function %fsub_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fsub v0, v1
  return v2
}

; block0:
;   sdbr %f0, %f2
;   br %r14

function %fmul_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmul v0, v1
  return v2
}

; block0:
;   meebr %f0, %f2
;   br %r14

function %fmul_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmul v0, v1
  return v2
}

; block0:
;   mdbr %f0, %f2
;   br %r14

function %fdiv_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fdiv v0, v1
  return v2
}

; block0:
;   debr %f0, %f2
;   br %r14

function %fdiv_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fdiv v0, v1
  return v2
}

; block0:
;   ddbr %f0, %f2
;   br %r14

function %fmin_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmin v0, v1
  return v2
}

; block0:
;   wfminsb %f0, %f0, %f2, 1
;   br %r14

function %fmin_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmin v0, v1
  return v2
}

; block0:
;   wfmindb %f0, %f0, %f2, 1
;   br %r14

function %fmax_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmax v0, v1
  return v2
}

; block0:
;   wfmaxsb %f0, %f0, %f2, 1
;   br %r14

function %fmax_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmax v0, v1
  return v2
}

; block0:
;   wfmaxdb %f0, %f0, %f2, 1
;   br %r14

function %sqrt_f32(f32) -> f32 {
block0(v0: f32):
  v1 = sqrt v0
  return v1
}

; block0:
;   sqebr %f0, %f0
;   br %r14

function %sqrt_f64(f64) -> f64 {
block0(v0: f64):
  v1 = sqrt v0
  return v1
}

; block0:
;   sqdbr %f0, %f0
;   br %r14

function %fabs_f32(f32) -> f32 {
block0(v0: f32):
  v1 = fabs v0
  return v1
}

; block0:
;   lpebr %f0, %f0
;   br %r14

function %fabs_f64(f64) -> f64 {
block0(v0: f64):
  v1 = fabs v0
  return v1
}

; block0:
;   lpdbr %f0, %f0
;   br %r14

function %fneg_f32(f32) -> f32 {
block0(v0: f32):
  v1 = fneg v0
  return v1
}

; block0:
;   lcebr %f0, %f0
;   br %r14

function %fneg_f64(f64) -> f64 {
block0(v0: f64):
  v1 = fneg v0
  return v1
}

; block0:
;   lcdbr %f0, %f0
;   br %r14

function %fpromote_f32(f32) -> f64 {
block0(v0: f32):
  v1 = fpromote.f64 v0
  return v1
}

; block0:
;   ldebr %f0, %f0
;   br %r14

function %fdemote_f64(f64) -> f32 {
block0(v0: f64):
  v1 = fdemote.f32 v0
  return v1
}

; block0:
;   ledbr %f0, %f0
;   br %r14

function %ceil_f32(f32) -> f32 {
block0(v0: f32):
  v1 = ceil v0
  return v1
}

; block0:
;   fiebr %f0, %f0, 6
;   br %r14

function %ceil_f64(f64) -> f64 {
block0(v0: f64):
  v1 = ceil v0
  return v1
}

; block0:
;   fidbr %f0, %f0, 6
;   br %r14

function %floor_f32(f32) -> f32 {
block0(v0: f32):
  v1 = floor v0
  return v1
}

; block0:
;   fiebr %f0, %f0, 7
;   br %r14

function %floor_f64(f64) -> f64 {
block0(v0: f64):
  v1 = floor v0
  return v1
}

; block0:
;   fidbr %f0, %f0, 7
;   br %r14

function %trunc_f32(f32) -> f32 {
block0(v0: f32):
  v1 = trunc v0
  return v1
}

; block0:
;   fiebr %f0, %f0, 5
;   br %r14

function %trunc_f64(f64) -> f64 {
block0(v0: f64):
  v1 = trunc v0
  return v1
}

; block0:
;   fidbr %f0, %f0, 5
;   br %r14

function %nearest_f32(f32) -> f32 {
block0(v0: f32):
  v1 = nearest v0
  return v1
}

; block0:
;   fiebr %f0, %f0, 4
;   br %r14

function %nearest_f64(f64) -> f64 {
block0(v0: f64):
  v1 = nearest v0
  return v1
}

; block0:
;   fidbr %f0, %f0, 4
;   br %r14

function %fma_f32(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
  v3 = fma v0, v1, v2
  return v3
}

; block0:
;   ldr %f1, %f0
;   ldr %f0, %f4
;   maebr %f0, %f1, %f2
;   br %r14

function %fma_f64(f64, f64, f64) -> f64 {
block0(v0: f64, v1: f64, v2: f64):
  v3 = fma v0, v1, v2
  return v3
}

; block0:
;   ldr %f1, %f0
;   ldr %f0, %f4
;   madbr %f0, %f1, %f2
;   br %r14

function %fcopysign_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fcopysign v0, v1
  return v2
}

; block0:
;   cpsdr %f0, %f2, %f0
;   br %r14

function %fcopysign_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fcopysign v0, v1
  return v2
}

; block0:
;   cpsdr %f0, %f2, %f0
;   br %r14

function %fcvt_to_uint_f32_i32(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; block0:
;   cebr %f0, %f0
;   jno 6 ; trap
;   clfebr %r2, 5, %f0, 0
;   jno 6 ; trap
;   br %r14

function %fcvt_to_sint_f32_i32(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; block0:
;   cebr %f0, %f0
;   jno 6 ; trap
;   cfebra %r2, 5, %f0, 0
;   jno 6 ; trap
;   br %r14

function %fcvt_to_uint_f32_i64(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; block0:
;   cebr %f0, %f0
;   jno 6 ; trap
;   clgebr %r2, 5, %f0, 0
;   jno 6 ; trap
;   br %r14

function %fcvt_to_sint_f32_i64(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; block0:
;   cebr %f0, %f0
;   jno 6 ; trap
;   cgebra %r2, 5, %f0, 0
;   jno 6 ; trap
;   br %r14

function %fcvt_to_uint_f64_i32(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; block0:
;   cdbr %f0, %f0
;   jno 6 ; trap
;   clfdbr %r2, 5, %f0, 0
;   jno 6 ; trap
;   br %r14

function %fcvt_to_sint_f64_i32(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; block0:
;   cdbr %f0, %f0
;   jno 6 ; trap
;   cfdbra %r2, 5, %f0, 0
;   jno 6 ; trap
;   br %r14

function %fcvt_to_uint_f64_i64(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; block0:
;   cdbr %f0, %f0
;   jno 6 ; trap
;   clgdbr %r2, 5, %f0, 0
;   jno 6 ; trap
;   br %r14

function %fcvt_to_sint_f64_i64(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; block0:
;   cdbr %f0, %f0
;   jno 6 ; trap
;   cgdbra %r2, 5, %f0, 0
;   jno 6 ; trap
;   br %r14

function %fcvt_from_uint_i32_f32(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_uint.f32 v0
  return v1
}

; block0:
;   celfbr %f0, 0, %r2, 0
;   br %r14

function %fcvt_from_sint_i32_f32(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; block0:
;   cefbra %f0, 0, %r2, 0
;   br %r14

function %fcvt_from_uint_i64_f32(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_uint.f32 v0
  return v1
}

; block0:
;   celgbr %f0, 0, %r2, 0
;   br %r14

function %fcvt_from_sint_i64_f32(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; block0:
;   cegbra %f0, 0, %r2, 0
;   br %r14

function %fcvt_from_uint_i32_f64(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_uint.f64 v0
  return v1
}

; block0:
;   cdlfbr %f0, 0, %r2, 0
;   br %r14

function %fcvt_from_sint_i32_f64(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; block0:
;   cdfbra %f0, 0, %r2, 0
;   br %r14

function %fcvt_from_uint_i64_f64(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_uint.f64 v0
  return v1
}

; block0:
;   cdlgbr %f0, 0, %r2, 0
;   br %r14

function %fcvt_from_sint_i64_f64(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; block0:
;   cdgbra %f0, 0, %r2, 0
;   br %r14

function %fcvt_to_uint_sat_f32_i32(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; block0:
;   clfebr %r2, 5, %f0, 0
;   cebr %f0, %f0
;   lochio %r2, 0
;   br %r14

function %fcvt_to_sint_sat_f32_i32(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; block0:
;   cfebra %r2, 5, %f0, 0
;   cebr %f0, %f0
;   lochio %r2, 0
;   br %r14

function %fcvt_to_uint_sat_f32_i64(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; block0:
;   clgebr %r2, 5, %f0, 0
;   cebr %f0, %f0
;   locghio %r2, 0
;   br %r14

function %fcvt_to_sint_sat_f32_i64(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; block0:
;   cgebra %r2, 5, %f0, 0
;   cebr %f0, %f0
;   locghio %r2, 0
;   br %r14

function %fcvt_to_uint_sat_f64_i32(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; block0:
;   clfdbr %r2, 5, %f0, 0
;   cdbr %f0, %f0
;   lochio %r2, 0
;   br %r14

function %fcvt_to_sint_sat_f64_i32(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; block0:
;   cfdbra %r2, 5, %f0, 0
;   cdbr %f0, %f0
;   lochio %r2, 0
;   br %r14

function %fcvt_to_uint_sat_f64_i64(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; block0:
;   clgdbr %r2, 5, %f0, 0
;   cdbr %f0, %f0
;   locghio %r2, 0
;   br %r14

function %fcvt_to_sint_sat_f64_i64(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; block0:
;   cgdbra %r2, 5, %f0, 0
;   cdbr %f0, %f0
;   locghio %r2, 0
;   br %r14

function %bitcast_i64_f64(i64) -> f64 {
block0(v0: i64):
  v1 = bitcast.f64 v0
  return v1
}

; block0:
;   ldgr %f0, %r2
;   br %r14

function %bitcast_f64_i64(f64) -> i64 {
block0(v0: f64):
  v1 = bitcast.i64 v0
  return v1
}

; block0:
;   lgdr %r2, %f0
;   br %r14

function %bitcast_i32_f32(i32) -> f32 {
block0(v0: i32):
  v1 = bitcast.f32 v0
  return v1
}

; block0:
;   sllg %r5, %r2, 32
;   ldgr %f0, %r5
;   br %r14

function %bitcast_f32_i32(f32) -> i32 {
block0(v0: f32):
  v1 = bitcast.i32 v0
  return v1
}

; block0:
;   lgdr %r5, %f0
;   srlg %r2, %r5, 32
;   br %r14

