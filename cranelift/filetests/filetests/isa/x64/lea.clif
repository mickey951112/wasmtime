test compile precise-output
target x86_64

function %add_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = iadd v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   addl    %eax, %esi, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   addl %esi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %add_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = iadd v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   addq    %rax, %rsi, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   addq %rsi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %add_i32_const(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 100
  v2 = iadd v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   addl    %eax, $100, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   addl $0x64, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %add_i64_const(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 100
  v2 = iadd v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   addq    %rax, $100, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   addq $0x64, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %add_i32_i32_const(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = iconst.i32 100
  v3 = iadd v0, v1
  v4 = iadd v3, v2
  return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   addl    %eax, %esi, %eax
;   addl    %eax, $100, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   addl %esi, %eax
;   addl $0x64, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %add_i64_i64_const(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = iconst.i64 100
  v3 = iadd v0, v1
  v4 = iadd v3, v2
  return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   addq    %rax, %rsi, %rax
;   addq    %rax, $100, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   addq %rsi, %rax
;   addq $0x64, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %add_i32_i32_mul_const(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = iconst.i32 100
  v3 = iconst.i32 2
  v4 = ishl v1, v3
  v5 = iadd v0, v4
  v6 = iadd v5, v2
  return v6
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rsi, %r8
;   shll    $2, %r8d, %r8d
;   movq    %rdi, %rax
;   addl    %eax, %r8d, %eax
;   addl    %eax, $100, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rsi, %r8
;   shll $2, %r8d
;   movq %rdi, %rax
;   addl %r8d, %eax
;   addl $0x64, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %add_i64_i64_mul_const(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = iconst.i64 100
  v3 = iconst.i64 2
  v4 = ishl v1, v3
  v5 = iadd v0, v4
  v6 = iadd v5, v2
  return v6
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rsi, %r8
;   shlq    $2, %r8, %r8
;   movq    %rdi, %rax
;   addq    %rax, %r8, %rax
;   addq    %rax, $100, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rsi, %r8
;   shlq $2, %r8
;   movq %rdi, %rax
;   addq %r8, %rax
;   addq $0x64, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %add_i32_i32_mul(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v3 = iconst.i32 2
  v4 = ishl v1, v3
  v5 = iadd v0, v4
  return v5
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rsi, %rdx
;   shll    $2, %edx, %edx
;   movq    %rdi, %rax
;   addl    %eax, %edx, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rsi, %rdx
;   shll $2, %edx
;   movq %rdi, %rax
;   addl %edx, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %add_i64_i64_mul(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v3 = iconst.i64 2
  v4 = ishl v1, v3
  v5 = iadd v0, v4
  return v5
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rsi, %rdx
;   shlq    $2, %rdx, %rdx
;   movq    %rdi, %rax
;   addq    %rax, %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rsi, %rdx
;   shlq $2, %rdx
;   movq %rdi, %rax
;   addq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

