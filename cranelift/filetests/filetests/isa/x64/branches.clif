test compile precise-output
target x86_64

function %f0(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = icmp eq v0, v1
  brnz v2, block1
  jump block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cmpl    %esi, %edi
;   jz      label1; j label2
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   movl    $2, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f1(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = icmp eq v0, v1
  brz v2, block1
  jump block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cmpl    %esi, %edi
;   jnz     label1; j label2
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   movl    $2, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f2(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = icmp eq v0, v1
  brnz v2, block1
  jump block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cmpl    %esi, %edi
;   jz      label1; j label2
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   movl    $2, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f3(f32, f32) -> i32 {
block0(v0: f32, v1: f32):
  v2 = fcmp eq v0, v1
  brnz v2, block1
  jump block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   ucomiss %xmm1, %xmm0
;   jp      label2
;   jnz     label2; j label1
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   movl    $2, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f4(f32, f32) -> i8 {
block0(v0: f32, v1: f32):
  v2 = fcmp eq v0, v1
  brz v2, block1
  jump block2
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   ucomiss %xmm1, %xmm0
;   jp      label1
;   jnz     label1; j label2
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   xorl    %eax, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f4(f32, f32) -> i8 {
block0(v0: f32, v1: f32):
  v2 = fcmp ne v0, v1
  brz v2, block1
  jump block2
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   ucomiss %xmm1, %xmm0
;   jp      label2
;   jnz     label2; j label1
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   xorl    %eax, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret


function %f5(i32) -> i8 {
  jt0 = jump_table [block1, block2]

block0(v0: i32):
  br_table v0, block1, jt0

block1:
  v1 = iconst.i8 1
  return v1

block2:
  v2 = iconst.i8 0
  return v2
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cmpl    $2, %edi
;   br_table %rdi, %r8, %r9
; block1:
;   jmp     label3
; block2:
;   jmp     label3
; block3:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block4:
;   xorl    %eax, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f6(i64) -> i8 {
block0(v0: i64):
  v1 = iconst.i64 0
  v2 = icmp slt v0, v1
  brnz v2, block1
  jump block2
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cmpq    $0, %rdi
;   jl      label1; j label2
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   xorl    %eax, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %f7(i32) -> i8 {
block0(v0: i32):
  v1 = iconst.i32 0
  v2 = icmp slt v0, v1
  brnz v2, block1
  jump block2
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cmpl    $0, %edi
;   jl      label1; j label2
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   xorl    %eax, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

function %fflags(f32) {
block200(v0: f32):
    v1 = f32const 0x34.0p0
    v2 = fcmp eq v0, v1
    brnz v2, block201
    jump block400

block400:
    v3 = fcmp ord v0, v1
    brnz v3, block202
    jump block201

block401:
    return

block201:
    return

block202:
    trap heap_oob
}

;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movl    $1112539136, %r8d
;   movd    %r8d, %xmm5
;   ucomiss %xmm5, %xmm0
;   jp      label2
;   jnz     label2; j label1
; block1:
;   jmp     label5
; block2:
;   movl    $1112539136, %esi
;   movd    %esi, %xmm9
;   ucomiss %xmm9, %xmm0
;   jnp     label3; j label4
; block3:
;   ud2 heap_oob
; block4:
;   jmp     label5
; block5:
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret

