test compile precise-output
target x86_64

function %f1(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = srem v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   xorl    %edx, %edx, %edx
;   srem_seq %al, %dl, %sil, %al, %dl, tmp=(none)
;   shrq    $8, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
;   pushq %rbp
;   movq %rsp, %rbp
; block0: ; offset 0x4
;   movq %rdi, %rax
;   xorl %edx, %edx
;   cmpb $0, %sil
;   jne 0x15
;   ud2 ; trap: int_divz
;   cmpb $0xff, %sil
;   jne 0x29
;   movl $0, %eax
;   jmp 0x2e
;   cbtw
;   idivb %sil ; trap: int_divz
;   shrq $8, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f2(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = srem v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   xorl    %edx, %edx, %edx
;   srem_seq %ax, %dx, %si, %ax, %dx, tmp=(none)
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
;   pushq %rbp
;   movq %rsp, %rbp
; block0: ; offset 0x4
;   movq %rdi, %rax
;   xorl %edx, %edx
;   cmpw $0, %si
;   jne 0x15
;   ud2 ; trap: int_divz
;   cmpw $-1, %si
;   jne 0x29
;   movl $0, %eax
;   jmp 0x2e
;   cwtd
;   idivw %si ; trap: int_divz
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f3(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = srem v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   xorl    %edx, %edx, %edx
;   srem_seq %eax, %edx, %esi, %eax, %edx, tmp=(none)
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
;   pushq %rbp
;   movq %rsp, %rbp
; block0: ; offset 0x4
;   movq %rdi, %rax
;   xorl %edx, %edx
;   cmpl $0, %esi
;   jne 0x14
;   ud2 ; trap: int_divz
;   cmpl $-1, %esi
;   jne 0x27
;   movl $0, %eax
;   jmp 0x2a
;   cltd
;   idivl %esi ; trap: int_divz
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f4(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = srem v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   xorl    %edx, %edx, %edx
;   srem_seq %rax, %rdx, %rsi, %rax, %rdx, tmp=(none)
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
;   pushq %rbp
;   movq %rsp, %rbp
; block0: ; offset 0x4
;   movq %rdi, %rax
;   xorl %edx, %edx
;   cmpq $0, %rsi
;   jne 0x15
;   ud2 ; trap: int_divz
;   cmpq $-1, %rsi
;   jne 0x29
;   movl $0, %eax
;   jmp 0x2e
;   cqto
;   idivq %rsi ; trap: int_divz
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

