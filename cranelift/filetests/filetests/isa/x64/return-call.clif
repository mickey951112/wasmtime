test compile precise-output
set preserve_frame_pointers=true
target x86_64

;;;; Test passing `i64`s ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %callee_i64(i64) -> i64 tail {
block0(v0: i64):
    v1 = iadd_imm.i64 v0, 10
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   lea     10(%rax), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   addq $0xa, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %call_i64(i64) -> i64 tail {
    fn0 = %callee_i64(i64) -> i64 tail

block0(v0: i64):
    return_call fn0(v0)
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rbp, %rcx
;   movq    8(%rcx), %rdx
;   load_ext_name %callee_i64+0, %r10
;   return_call_unknown %r10 new_stack_arg_size:0 old_stack_arg_size:0 ret_addr:%v194 fp:%v193 tmp:%v195 %rax=%rax
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rbp, %rcx
;   movq 8(%rcx), %rdx
;   movabsq $0, %r10 ; reloc_external Abs8 %callee_i64 0
;   movq (%rcx), %rbp
;   leaq 8(%rcx), %rsp
;   movq %rdx, (%rsp)
;   jmpq *%r10

;;;; Test colocated tail calls ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %colocated_i64(i64) -> i64 tail {
    fn0 = colocated %callee_i64(i64) -> i64 tail

block0(v0: i64):
    return_call fn0(v0)
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rbp, %rcx
;   movq    8(%rcx), %rdx
;   return_call_known TestCase(%callee_i64) new_stack_arg_size:0 old_stack_arg_size:0 ret_addr:%v194 fp:%v193 tmp:%v195 %rax=%rax
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rbp, %rcx
;   movq 8(%rcx), %rdx
;   movq (%rcx), %rbp
;   leaq 8(%rcx), %rsp
;   movq %rdx, (%rsp)
;   jmp 0x1b ; reloc_external CallPCRel4 %callee_i64 -4

;;;; Test passing `f64`s ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %callee_f64(f64) -> f64 tail {
block0(v0: f64):
    v1 = f64const 0x10.0
    v2 = fadd.f64 v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   addsd   %xmm0, const(0), %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   addsd 0x14(%rip), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %dh, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)

function %call_f64(f64) -> f64 tail {
    fn0 = %callee_f64(f64) -> f64 tail

block0(v0: f64):
    return_call fn0(v0)
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rbp, %rax
;   movq    8(%rax), %rdx
;   load_ext_name %callee_f64+0, %r10
;   return_call_unknown %r10 new_stack_arg_size:0 old_stack_arg_size:0 ret_addr:%v194 fp:%v193 tmp:%v195 %xmm0=%xmm0
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rbp, %rax
;   movq 8(%rax), %rdx
;   movabsq $0, %r10 ; reloc_external Abs8 %callee_f64 0
;   movq (%rax), %rbp
;   leaq 8(%rax), %rsp
;   movq %rdx, (%rsp)
;   jmpq *%r10

;;;; Test passing `i8`s ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %callee_i8(i8) -> i8 tail {
block0(v0: i8):
    v1 = iconst.i8 0
    v2 = icmp eq v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   testb   %al, %al
;   setz    %al
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testb %al, %al
;   sete %al
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %call_i8(i8) -> i8 tail {
    fn0 = %callee_i8(i8) -> i8 tail

block0(v0: i8):
    return_call fn0(v0)
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rbp, %rcx
;   movq    8(%rcx), %rdx
;   load_ext_name %callee_i8+0, %r10
;   return_call_unknown %r10 new_stack_arg_size:0 old_stack_arg_size:0 ret_addr:%v194 fp:%v193 tmp:%v195 %rax=%rax
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rbp, %rcx
;   movq 8(%rcx), %rdx
;   movabsq $0, %r10 ; reloc_external Abs8 %callee_i8 0
;   movq (%rcx), %rbp
;   leaq 8(%rcx), %rsp
;   movq %rdx, (%rsp)
;   jmpq *%r10

;;;; Test passing many arguments on stack ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64):
    return v25
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    16(%rbp), %rax
;   movq    24(%rbp), %rdx
;   movq    32(%rbp), %r9
;   movq    40(%rbp), %r11
;   movq    48(%rbp), %rdi
;   movq    56(%rbp), %rcx
;   movq    64(%rbp), %r8
;   movq    72(%rbp), %r10
;   movq    80(%rbp), %rsi
;   movq    88(%rbp), %rax
;   movq    96(%rbp), %rdx
;   movq    104(%rbp), %r9
;   movq    112(%rbp), %r11
;   movq    120(%rbp), %rdi
;   movq    128(%rbp), %rcx
;   movq    136(%rbp), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret 128
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq 0x10(%rbp), %rax
;   movq 0x18(%rbp), %rdx
;   movq 0x20(%rbp), %r9
;   movq 0x28(%rbp), %r11
;   movq 0x30(%rbp), %rdi
;   movq 0x38(%rbp), %rcx
;   movq 0x40(%rbp), %r8
;   movq 0x48(%rbp), %r10
;   movq 0x50(%rbp), %rsi
;   movq 0x58(%rbp), %rax
;   movq 0x60(%rbp), %rdx
;   movq 0x68(%rbp), %r9
;   movq 0x70(%rbp), %r11
;   movq 0x78(%rbp), %rdi
;   movq 0x80(%rbp), %rcx
;   movq 0x88(%rbp), %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq $0x80

function %tail_caller_stack_args() -> i64 tail {
    fn0 = %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail

block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    return_call fn0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq    %rsp, $112, %rsp
; block0:
;   movl    $10, %eax
;   movq    %rax, rsp(104 + virtual offset)
;   movl    $15, %ecx
;   movq    %rcx, rsp(96 + virtual offset)
;   movl    $20, %edx
;   movq    %rdx, rsp(88 + virtual offset)
;   movl    $25, %ebx
;   movq    %rbx, rsp(80 + virtual offset)
;   movl    $30, %esi
;   movq    %rsi, rsp(72 + virtual offset)
;   movl    $35, %edi
;   movq    %rdi, rsp(64 + virtual offset)
;   movl    $40, %r8d
;   movq    %r8, rsp(56 + virtual offset)
;   movl    $45, %r9d
;   movq    %r9, rsp(48 + virtual offset)
;   movl    $50, %r10d
;   movq    %r10, rsp(40 + virtual offset)
;   movl    $55, %r11d
;   movq    %r11, rsp(32 + virtual offset)
;   movl    $60, %r15d
;   movl    $65, %r13d
;   movl    $70, %r14d
;   movl    $75, %eax
;   movl    $80, %ecx
;   movl    $85, %edx
;   movl    $90, %ebx
;   movl    $95, %esi
;   movl    $100, %r8d
;   movq    %r8, rsp(24 + virtual offset)
;   movl    $105, %r8d
;   movl    $110, %r9d
;   movl    $115, %r10d
;   movl    $120, %r11d
;   movl    $125, %r12d
;   movq    %r12, rsp(16 + virtual offset)
;   movl    $130, %r12d
;   movq    %r12, rsp(8 + virtual offset)
;   movl    $135, %r12d
;   movq    %r12, rsp(0 + virtual offset)
;   movq    %rbp, %r12
;   movq    8(%r12), %rdi
;   subq    %rsp, $128, %rsp
;   virtual_sp_offset_adjust 128
;   movq    %r15, 0(%rsp)
;   movq    %r13, 8(%rsp)
;   movq    %r14, 16(%rsp)
;   movq    %rax, 24(%rsp)
;   movq    %rcx, 32(%rsp)
;   movq    %rdx, 40(%rsp)
;   movq    %rbx, 48(%rsp)
;   movq    %rsi, 56(%rsp)
;   movq    rsp(24 + virtual offset), %rax
;   movq    %rax, 64(%rsp)
;   movq    %r8, 72(%rsp)
;   movq    %r9, 80(%rsp)
;   movq    %r10, 88(%rsp)
;   movq    %r11, 96(%rsp)
;   movq    rsp(16 + virtual offset), %rax
;   movq    %rax, 104(%rsp)
;   movq    rsp(8 + virtual offset), %rax
;   movq    %rax, 112(%rsp)
;   movq    rsp(0 + virtual offset), %rax
;   movq    %rax, 120(%rsp)
;   load_ext_name %tail_callee_stack_args+0, %r15
;   movq    %rdi, %r14
;   movq    rsp(32 + virtual offset), %r11
;   movq    rsp(40 + virtual offset), %r10
;   movq    rsp(48 + virtual offset), %r9
;   movq    rsp(56 + virtual offset), %r8
;   movq    rsp(64 + virtual offset), %rdi
;   movq    rsp(72 + virtual offset), %rsi
;   movq    rsp(80 + virtual offset), %rbx
;   movq    rsp(88 + virtual offset), %rdx
;   movq    rsp(96 + virtual offset), %rcx
;   movq    rsp(104 + virtual offset), %rax
;   return_call_unknown %r15 new_stack_arg_size:128 old_stack_arg_size:0 ret_addr:%v219 fp:%v218 tmp:%v220 %rax=%rax %rcx=%rcx %rdx=%rdx %rbx=%rbx %rsi=%rsi %rdi=%rdi %r8=%r8 %r9=%r9 %r10=%r10 %r11=%r11
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0x70, %rsp
; block1: ; offset 0x8
;   movl $0xa, %eax
;   movq %rax, 0x68(%rsp)
;   movl $0xf, %ecx
;   movq %rcx, 0x60(%rsp)
;   movl $0x14, %edx
;   movq %rdx, 0x58(%rsp)
;   movl $0x19, %ebx
;   movq %rbx, 0x50(%rsp)
;   movl $0x1e, %esi
;   movq %rsi, 0x48(%rsp)
;   movl $0x23, %edi
;   movq %rdi, 0x40(%rsp)
;   movl $0x28, %r8d
;   movq %r8, 0x38(%rsp)
;   movl $0x2d, %r9d
;   movq %r9, 0x30(%rsp)
;   movl $0x32, %r10d
;   movq %r10, 0x28(%rsp)
;   movl $0x37, %r11d
;   movq %r11, 0x20(%rsp)
;   movl $0x3c, %r15d
;   movl $0x41, %r13d
;   movl $0x46, %r14d
;   movl $0x4b, %eax
;   movl $0x50, %ecx
;   movl $0x55, %edx
;   movl $0x5a, %ebx
;   movl $0x5f, %esi
;   movl $0x64, %r8d
;   movq %r8, 0x18(%rsp)
;   movl $0x69, %r8d
;   movl $0x6e, %r9d
;   movl $0x73, %r10d
;   movl $0x78, %r11d
;   movl $0x7d, %r12d
;   movq %r12, 0x10(%rsp)
;   movl $0x82, %r12d
;   movq %r12, 8(%rsp)
;   movl $0x87, %r12d
;   movq %r12, (%rsp)
;   movq %rbp, %r12
;   movq 8(%r12), %rdi
;   subq $0x80, %rsp
;   movq %r15, (%rsp)
;   movq %r13, 8(%rsp)
;   movq %r14, 0x10(%rsp)
;   movq %rax, 0x18(%rsp)
;   movq %rcx, 0x20(%rsp)
;   movq %rdx, 0x28(%rsp)
;   movq %rbx, 0x30(%rsp)
;   movq %rsi, 0x38(%rsp)
;   movq 0x98(%rsp), %rax
;   movq %rax, 0x40(%rsp)
;   movq %r8, 0x48(%rsp)
;   movq %r9, 0x50(%rsp)
;   movq %r10, 0x58(%rsp)
;   movq %r11, 0x60(%rsp)
;   movq 0x90(%rsp), %rax
;   movq %rax, 0x68(%rsp)
;   movq 0x88(%rsp), %rax
;   movq %rax, 0x70(%rsp)
;   movq 0x80(%rsp), %rax
;   movq %rax, 0x78(%rsp)
;   movabsq $0, %r15 ; reloc_external Abs8 %tail_callee_stack_args 0
;   movq %rdi, %r14
;   movq 0xa0(%rsp), %r11
;   movq 0xa8(%rsp), %r10
;   movq 0xb0(%rsp), %r9
;   movq 0xb8(%rsp), %r8
;   movq 0xc0(%rsp), %rdi
;   movq 0xc8(%rsp), %rsi
;   movq 0xd0(%rsp), %rbx
;   movq 0xd8(%rsp), %rdx
;   movq 0xe0(%rsp), %rcx
;   movq 0xe8(%rsp), %rax
;   movq (%r12), %rbp
;   movq 0x78(%rsp), %r13
;   movq %r13, 8(%r12)
;   movq 0x70(%rsp), %r13
;   movq %r13, (%r12)
;   movq 0x68(%rsp), %r13
;   movq %r13, -8(%r12)
;   movq 0x60(%rsp), %r13
;   movq %r13, -0x10(%r12)
;   movq 0x58(%rsp), %r13
;   movq %r13, -0x18(%r12)
;   movq 0x50(%rsp), %r13
;   movq %r13, -0x20(%r12)
;   movq 0x48(%rsp), %r13
;   movq %r13, -0x28(%r12)
;   movq 0x40(%rsp), %r13
;   movq %r13, -0x30(%r12)
;   movq 0x38(%rsp), %r13
;   movq %r13, -0x38(%r12)
;   movq 0x30(%rsp), %r13
;   movq %r13, -0x40(%r12)
;   movq 0x28(%rsp), %r13
;   movq %r13, -0x48(%r12)
;   movq 0x20(%rsp), %r13
;   movq %r13, -0x50(%r12)
;   movq 0x18(%rsp), %r13
;   movq %r13, -0x58(%r12)
;   movq 0x10(%rsp), %r13
;   movq %r13, -0x60(%r12)
;   movq 8(%rsp), %r13
;   movq %r13, -0x68(%r12)
;   movq (%rsp), %r13
;   movq %r13, -0x70(%r12)
;   leaq -0x78(%r12), %rsp
;   movq %r14, (%rsp)
;   jmpq *%r15

