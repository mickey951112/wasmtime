test compile precise-output
target x86_64

function %f1(i8) -> f32 {
block0(v0: i8):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movsbl  %dil, %eax
;   cvtsi2ss %eax, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movsbl %dil, %eax
;   cvtsi2ssl %eax, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f2(i16) -> f32 {
block0(v0: i16):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movswl  %di, %eax
;   cvtsi2ss %eax, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movswl %di, %eax
;   cvtsi2ssl %eax, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f3(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvtsi2ss %edi, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvtsi2ssl %edi, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f4(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvtsi2ss %rdi, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvtsi2ssq %rdi, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f5(i8) -> f64 {
block0(v0: i8):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movsbl  %dil, %eax
;   cvtsi2sd %eax, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movsbl %dil, %eax
;   cvtsi2sdl %eax, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f6(i16) -> f64 {
block0(v0: i16):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movswl  %di, %eax
;   cvtsi2sd %eax, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movswl %di, %eax
;   cvtsi2sdl %eax, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f7(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvtsi2sd %edi, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvtsi2sdl %edi, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f8(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvtsi2sd %rdi, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvtsi2sdq %rdi, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f9(i32x4) -> f64x2 {
block0(v0: i32x4):
  v1 = fcvt_low_from_sint.f64x2 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvtdq2pd %xmm0, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvtdq2pd %xmm0, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f10(i8, i16, i32, i64) -> f32 {
block0(v0: i8, v1: i16, v2: i32, v3: i64):
  v4 = fcvt_from_uint.f32 v0
  v5 = fcvt_from_uint.f32 v1
  v6 = fcvt_from_uint.f32 v2
  v7 = fcvt_from_uint.f32 v3
  v8 = fadd.f32 v4, v5
  v9 = fadd.f32 v8, v6
  v10 = fadd.f32 v9, v7
  return v10
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzbq  %dil, %r9
;   cvtsi2ss %r9, %xmm0
;   movzwq  %si, %r9
;   cvtsi2ss %r9, %xmm1
;   movl    %edx, %r9d
;   cvtsi2ss %r9, %xmm2
;   u64_to_f32_seq %rcx, %xmm14, %r9, %r10
;   addss   %xmm0, %xmm1, %xmm0
;   addss   %xmm0, %xmm2, %xmm0
;   addss   %xmm0, %xmm14, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzbq %dil, %r9
;   cvtsi2ssq %r9, %xmm0
;   movzwq %si, %r9
;   cvtsi2ssq %r9, %xmm1
;   movl %edx, %r9d
;   cvtsi2ssq %r9, %xmm2
;   cmpq $0, %rcx
;   jl 0x32
;   cvtsi2ssq %rcx, %xmm14
;   jmp 0x4d
;   movq %rcx, %r9
;   shrq $1, %r9
;   movq %rcx, %r10
;   andq $1, %r10
;   orq %r9, %r10
;   cvtsi2ssq %r10, %xmm14
;   addss %xmm14, %xmm14
;   addss %xmm1, %xmm0
;   addss %xmm2, %xmm0
;   addss %xmm14, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f11(i32x4) -> f64x2 {
block0(v0: i32x4):
  v1 = uwiden_low v0
  v2 = fcvt_from_uint.f64x2 v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   unpcklps %xmm0, const(0), %xmm0
;   subpd   %xmm0, const(1), %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   unpcklps 0x15(%rip), %xmm0
;   subpd 0x1d(%rip), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   xorb %al, (%rbx)
;   addb %dh, (%rax)
;   addb %al, (%r8)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   xorb %al, (%rbx)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %dh, (%rax)

function %f12(i32x4) -> f32x4 {
block0(v0: i32x4):
  v1 = fcvt_from_uint.f32x4 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movdqa  %xmm0, %xmm3
;   pslld   %xmm3, $16, %xmm3
;   psrld   %xmm3, $16, %xmm3
;   movdqa  %xmm0, %xmm9
;   psubd   %xmm9, %xmm3, %xmm9
;   cvtdq2ps %xmm3, %xmm8
;   psrld   %xmm9, $1, %xmm9
;   cvtdq2ps %xmm9, %xmm0
;   addps   %xmm0, %xmm0, %xmm0
;   addps   %xmm0, %xmm8, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movdqa %xmm0, %xmm3
;   pslld $0x10, %xmm3
;   psrld $0x10, %xmm3
;   movdqa %xmm0, %xmm9
;   psubd %xmm3, %xmm9
;   cvtdq2ps %xmm3, %xmm8
;   psrld $1, %xmm9
;   cvtdq2ps %xmm9, %xmm0
;   addps %xmm0, %xmm0
;   addps %xmm8, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f13(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float32_to_uint32_seq %xmm0, %eax, %r8, %xmm3, %xmm4
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl $0x4f000000, %r8d
;   movd %r8d, %xmm3
;   ucomiss %xmm3, %xmm0
;   jae 0x2f
;   jnp 0x20
;   ud2 ; trap: bad_toint
;   cvttss2si %xmm0, %eax
;   cmpl $0, %eax
;   jge 0x4b
;   ud2 ; trap: int_ovf
;   movaps %xmm0, %xmm4
;   subss %xmm3, %xmm4
;   cvttss2si %xmm4, %eax
;   cmpl $0, %eax
;   jge 0x45
;   ud2 ; trap: int_ovf
;   addl $0x80000000, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f14(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float32_to_uint64_seq %xmm0, %rax, %r8, %xmm3, %xmm4
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl $0x5f000000, %r8d
;   movd %r8d, %xmm3
;   ucomiss %xmm3, %xmm0
;   jae 0x31
;   jnp 0x20
;   ud2 ; trap: bad_toint
;   cvttss2si %xmm0, %rax
;   cmpq $0, %rax
;   jge 0x56
;   ud2 ; trap: int_ovf
;   movaps %xmm0, %xmm4
;   subss %xmm3, %xmm4
;   cvttss2si %xmm4, %rax
;   cmpq $0, %rax
;   jge 0x49
;   ud2 ; trap: int_ovf
;   movabsq $9223372036854775808, %r8
;   addq %r8, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f15(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float64_to_uint32_seq %xmm0, %eax, %r8, %xmm3, %xmm4
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movabsq $0x41e0000000000000, %r8
;   movq %r8, %xmm3
;   ucomisd %xmm3, %xmm0
;   jae 0x34
;   jnp 0x25
;   ud2 ; trap: bad_toint
;   cvttsd2si %xmm0, %eax
;   cmpl $0, %eax
;   jge 0x50
;   ud2 ; trap: int_ovf
;   movaps %xmm0, %xmm4
;   subsd %xmm3, %xmm4
;   cvttsd2si %xmm4, %eax
;   cmpl $0, %eax
;   jge 0x4a
;   ud2 ; trap: int_ovf
;   addl $0x80000000, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f16(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float64_to_uint64_seq %xmm0, %rax, %r8, %xmm3, %xmm4
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movabsq $0x43e0000000000000, %r8
;   movq %r8, %xmm3
;   ucomisd %xmm3, %xmm0
;   jae 0x36
;   jnp 0x25
;   ud2 ; trap: bad_toint
;   cvttsd2si %xmm0, %rax
;   cmpq $0, %rax
;   jge 0x5b
;   ud2 ; trap: int_ovf
;   movaps %xmm0, %xmm4
;   subsd %xmm3, %xmm4
;   cvttsd2si %xmm4, %rax
;   cmpq $0, %rax
;   jge 0x4e
;   ud2 ; trap: int_ovf
;   movabsq $9223372036854775808, %r8
;   addq %r8, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f17(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float32_to_uint32_sat_seq %xmm0, %eax, %r8, %xmm3, %xmm4
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl $0x4f000000, %r8d
;   movd %r8d, %xmm3
;   ucomiss %xmm3, %xmm0
;   jae 0x39
;   jnp 0x25
;   xorl %eax, %eax
;   jmp 0x5d
;   cvttss2si %xmm0, %eax
;   cmpl $0, %eax
;   jge 0x5d
;   xorl %eax, %eax
;   jmp 0x5d
;   movaps %xmm0, %xmm4
;   subss %xmm3, %xmm4
;   cvttss2si %xmm4, %eax
;   cmpl $0, %eax
;   jge 0x57
;   movl $0xffffffff, %eax
;   jmp 0x5d
;   addl $0x80000000, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f18(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float32_to_uint64_sat_seq %xmm0, %rax, %r8, %xmm3, %xmm4
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl $0x5f000000, %r8d
;   movd %r8d, %xmm3
;   ucomiss %xmm3, %xmm0
;   jae 0x3d
;   jnp 0x26
;   xorq %rax, %rax
;   jmp 0x6c
;   cvttss2si %xmm0, %rax
;   cmpq $0, %rax
;   jge 0x6c
;   xorq %rax, %rax
;   jmp 0x6c
;   movaps %xmm0, %xmm4
;   subss %xmm3, %xmm4
;   cvttss2si %xmm4, %rax
;   cmpq $0, %rax
;   jge 0x5f
;   movq $18446744073709551615, %rax
;   jmp 0x6c
;   movabsq $9223372036854775808, %r8
;   addq %r8, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f19(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float64_to_uint32_sat_seq %xmm0, %eax, %r8, %xmm3, %xmm4
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movabsq $0x41e0000000000000, %r8
;   movq %r8, %xmm3
;   ucomisd %xmm3, %xmm0
;   jae 0x3e
;   jnp 0x2a
;   xorl %eax, %eax
;   jmp 0x62
;   cvttsd2si %xmm0, %eax
;   cmpl $0, %eax
;   jge 0x62
;   xorl %eax, %eax
;   jmp 0x62
;   movaps %xmm0, %xmm4
;   subsd %xmm3, %xmm4
;   cvttsd2si %xmm4, %eax
;   cmpl $0, %eax
;   jge 0x5c
;   movl $0xffffffff, %eax
;   jmp 0x62
;   addl $0x80000000, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f20(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float64_to_uint64_sat_seq %xmm0, %rax, %r8, %xmm3, %xmm4
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movabsq $0x43e0000000000000, %r8
;   movq %r8, %xmm3
;   ucomisd %xmm3, %xmm0
;   jae 0x42
;   jnp 0x2b
;   xorq %rax, %rax
;   jmp 0x71
;   cvttsd2si %xmm0, %rax
;   cmpq $0, %rax
;   jge 0x71
;   xorq %rax, %rax
;   jmp 0x71
;   movaps %xmm0, %xmm4
;   subsd %xmm3, %xmm4
;   cvttsd2si %xmm4, %rax
;   cmpq $0, %rax
;   jge 0x64
;   movq $18446744073709551615, %rax
;   jmp 0x71
;   movabsq $9223372036854775808, %r8
;   addq %r8, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f21(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float32_to_sint32_seq %xmm0, %eax, %rdx, %xmm3
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvttss2si %xmm0, %eax
;   cmpl $1, %eax
;   jno 0x3f
;   ucomiss %xmm0, %xmm0
;   jnp 0x1c
;   ud2 ; trap: bad_toint
;   movl $0xcf000000, %edx
;   movd %edx, %xmm3
;   ucomiss %xmm3, %xmm0
;   jae 0x30
;   ud2 ; trap: int_ovf
;   xorpd %xmm3, %xmm3
;   ucomiss %xmm0, %xmm3
;   jae 0x3f
;   ud2 ; trap: int_ovf
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f22(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float32_to_sint64_seq %xmm0, %rax, %rdx, %xmm3
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvttss2si %xmm0, %rax
;   cmpq $1, %rax
;   jno 0x41
;   ucomiss %xmm0, %xmm0
;   jnp 0x1e
;   ud2 ; trap: bad_toint
;   movl $0xdf000000, %edx
;   movd %edx, %xmm3
;   ucomiss %xmm3, %xmm0
;   jae 0x32
;   ud2 ; trap: int_ovf
;   xorpd %xmm3, %xmm3
;   ucomiss %xmm0, %xmm3
;   jae 0x41
;   ud2 ; trap: int_ovf
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f23(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float64_to_sint32_seq %xmm0, %eax, %rdx, %xmm3
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvttsd2si %xmm0, %eax
;   cmpl $1, %eax
;   jno 0x48
;   ucomisd %xmm0, %xmm0
;   jnp 0x1d
;   ud2 ; trap: bad_toint
;   movabsq $13970166044105375744, %rdx
;   movq %rdx, %xmm3
;   ucomisd %xmm3, %xmm0
;   ja 0x38
;   ud2 ; trap: int_ovf
;   xorpd %xmm3, %xmm3
;   ucomisd %xmm0, %xmm3
;   jae 0x48
;   ud2 ; trap: int_ovf
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f24(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float64_to_sint64_seq %xmm0, %rax, %rdx, %xmm3
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvttsd2si %xmm0, %rax
;   cmpq $1, %rax
;   jno 0x4a
;   ucomisd %xmm0, %xmm0
;   jnp 0x1f
;   ud2 ; trap: bad_toint
;   movabsq $14114281232179134464, %rdx
;   movq %rdx, %xmm3
;   ucomisd %xmm3, %xmm0
;   jae 0x3a
;   ud2 ; trap: int_ovf
;   xorpd %xmm3, %xmm3
;   ucomisd %xmm0, %xmm3
;   jae 0x4a
;   ud2 ; trap: int_ovf
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f25(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float32_to_sint32_sat_seq %xmm0, %eax, %rdx, %xmm3
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvttss2si %xmm0, %eax
;   cmpl $1, %eax
;   jno 0x33
;   ucomiss %xmm0, %xmm0
;   jnp 0x21
;   xorl %eax, %eax
;   jmp 0x33
;   xorpd %xmm3, %xmm3
;   ucomiss %xmm0, %xmm3
;   jae 0x33
;   movl $0x7fffffff, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f26(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float32_to_sint64_sat_seq %xmm0, %rax, %rdx, %xmm3
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvttss2si %xmm0, %rax
;   cmpq $1, %rax
;   jno 0x3b
;   ucomiss %xmm0, %xmm0
;   jnp 0x24
;   xorq %rax, %rax
;   jmp 0x3b
;   xorpd %xmm3, %xmm3
;   ucomiss %xmm0, %xmm3
;   jae 0x3b
;   movabsq $0x7fffffffffffffff, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f27(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float64_to_sint32_sat_seq %xmm0, %eax, %rdx, %xmm3
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvttsd2si %xmm0, %eax
;   cmpl $1, %eax
;   jno 0x35
;   ucomisd %xmm0, %xmm0
;   jnp 0x22
;   xorl %eax, %eax
;   jmp 0x35
;   xorpd %xmm3, %xmm3
;   ucomisd %xmm0, %xmm3
;   jae 0x35
;   movl $0x7fffffff, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f28(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cvt_float64_to_sint64_sat_seq %xmm0, %rax, %rdx, %xmm3
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cvttsd2si %xmm0, %rax
;   cmpq $1, %rax
;   jno 0x3d
;   ucomisd %xmm0, %xmm0
;   jnp 0x25
;   xorq %rax, %rax
;   jmp 0x3d
;   xorpd %xmm3, %xmm3
;   ucomisd %xmm0, %xmm3
;   jae 0x3d
;   movabsq $0x7fffffffffffffff, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f29(f32x4) -> i32x4 {
block0(v0: f32x4):
  v1 = fcvt_to_uint_sat.i32x4 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   uninit  %xmm6
;   xorps   %xmm6, %xmm6, %xmm6
;   movdqa  %xmm0, %xmm11
;   maxps   %xmm11, %xmm6, %xmm11
;   pcmpeqd %xmm6, %xmm6, %xmm6
;   psrld   %xmm6, $1, %xmm6
;   cvtdq2ps %xmm6, %xmm15
;   cvttps2dq %xmm11, %xmm14
;   subps   %xmm11, %xmm15, %xmm11
;   cmpps   $2, %xmm15, %xmm11, %xmm15
;   cvttps2dq %xmm11, %xmm0
;   pxor    %xmm0, %xmm15, %xmm0
;   uninit  %xmm9
;   pxor    %xmm9, %xmm9, %xmm9
;   pmaxsd  %xmm0, %xmm9, %xmm0
;   paddd   %xmm0, %xmm14, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   xorps %xmm6, %xmm6
;   movdqa %xmm0, %xmm11
;   maxps %xmm6, %xmm11
;   pcmpeqd %xmm6, %xmm6
;   psrld $1, %xmm6
;   cvtdq2ps %xmm6, %xmm15
;   cvttps2dq %xmm11, %xmm14
;   subps %xmm15, %xmm11
;   cmpleps %xmm11, %xmm15
;   cvttps2dq %xmm11, %xmm0
;   pxor %xmm15, %xmm0
;   pxor %xmm9, %xmm9
;   pmaxsd %xmm9, %xmm0
;   paddd %xmm14, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f30(f32x4) -> i32x4 {
block0(v0: f32x4):
  v1 = fcvt_to_sint_sat.i32x4 v0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movdqa  %xmm0, %xmm4
;   cmpps   $0, %xmm4, %xmm0, %xmm4
;   movdqa  %xmm0, %xmm5
;   andps   %xmm5, %xmm4, %xmm5
;   pxor    %xmm4, %xmm5, %xmm4
;   cvttps2dq %xmm5, %xmm8
;   movdqa  %xmm8, %xmm0
;   pand    %xmm0, %xmm4, %xmm0
;   psrad   %xmm0, $31, %xmm0
;   pxor    %xmm0, %xmm8, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movdqa %xmm0, %xmm4
;   cmpeqps %xmm0, %xmm4
;   movdqa %xmm0, %xmm5
;   andps %xmm4, %xmm5
;   pxor %xmm5, %xmm4
;   cvttps2dq %xmm5, %xmm8
;   movdqa %xmm8, %xmm0
;   pand %xmm4, %xmm0
;   psrad $0x1f, %xmm0
;   pxor %xmm8, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

