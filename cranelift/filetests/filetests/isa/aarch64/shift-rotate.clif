test compile
set unwind_info=false
target aarch64

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ROR, variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %i128_rotr(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = rotr.i128 v0, v1
  return v2
}

; check:  mov x4, x1
; nextln: orr x1, xzr, #128
; nextln: sub x1, x1, x2
; nextln: lsr x3, x0, x2
; nextln: lsr x5, x4, x2
; nextln: orn w6, wzr, w2
; nextln: lsl x7, x4, #1
; nextln: lsl x6, x7, x6
; nextln: orr x6, x3, x6
; nextln: ands xzr, x2, #64
; nextln: csel x3, xzr, x5, ne
; nextln: csel x2, x5, x6, ne
; nextln: lsl x5, x0, x1
; nextln: lsl x4, x4, x1
; nextln: orn w6, wzr, w1
; nextln: lsr x0, x0, #1
; nextln: lsr x0, x0, x6
; nextln: orr x0, x4, x0
; nextln: ands xzr, x1, #64
; nextln: csel x1, x5, x0, ne
; nextln: csel x0, xzr, x5, ne
; nextln: orr x1, x3, x1
; nextln: orr x0, x2, x0
; nextln: ret


function %f0(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = rotr.i64 v0, v1
  return v2
}

; check:  ror x0, x0, x1
; nextln:  ret

function %f1(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = rotr.i32 v0, v1
  return v2
}

; check:  ror w0, w0, w1
; nextln:  ret

function %f2(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = rotr.i16 v0, v1
  return v2
}

; check:  uxth w0, w0
; nextln:  and w1, w1, #15
; nextln:  sub w2, w1, #16
; nextln:  sub w2, wzr, w2
; nextln:  lsr w1, w0, w1
; nextln:  lsl w0, w0, w2
; nextln:  orr w0, w0, w1
; nextln:  ret

function %f3(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = rotr.i8 v0, v1
  return v2
}

; check:  uxtb w0, w0
; nextln:  and w1, w1, #7
; nextln:  sub w2, w1, #8
; nextln:  sub w2, wzr, w2
; nextln:  lsr w1, w0, w1
; nextln:  lsl w0, w0, w2
; nextln:  orr w0, w0, w1
; nextln:  ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ROL, variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %i128_rotl(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = rotl.i128 v0, v1
  return v2
}

; check:  mov x4, x0
; nextln: orr x0, xzr, #128
; nextln: sub x0, x0, x2
; nextln: lsl x3, x4, x2
; nextln: lsl x5, x1, x2
; nextln: orn w6, wzr, w2
; nextln: lsr x7, x4, #1
; nextln: lsr x6, x7, x6
; nextln: orr x5, x5, x6
; nextln: ands xzr, x2, #64
; nextln: csel x2, x3, x5, ne
; nextln: csel x3, xzr, x3, ne
; nextln: lsr x5, x4, x0
; nextln: lsr x4, x1, x0
; nextln: orn w6, wzr, w0
; nextln: lsl x1, x1, #1
; nextln: lsl x1, x1, x6
; nextln: orr x1, x5, x1
; nextln: ands xzr, x0, #64
; nextln: csel x0, xzr, x4, ne
; nextln: csel x1, x4, x1, ne
; nextln: orr x1, x3, x1
; nextln: orr x0, x2, x0
; nextln: mov x2, x0
; nextln: mov x0, x1
; nextln: mov x1, x2
; nextln: ret

function %f4(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = rotl.i64 v0, v1
  return v2
}

; check:  sub x1, xzr, x1
; nextln:  ror x0, x0, x1
; nextln:  ret

function %f5(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = rotl.i32 v0, v1
  return v2
}

; check:  sub w1, wzr, w1
; nextln:  ror w0, w0, w1
; nextln:  ret

function %f6(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = rotl.i16 v0, v1
  return v2
}

; check:   sub w1, wzr, w1
; nextln:  uxth w0, w0
; nextln:  and w1, w1, #15
; nextln:  sub w2, w1, #16
; nextln:  sub w2, wzr, w2
; nextln:  lsr w1, w0, w1
; nextln:  lsl w0, w0, w2
; nextln:  orr w0, w0, w1
; nextln:  ret

function %f7(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = rotl.i8 v0, v1
  return v2
}

; check:   sub w1, wzr, w1
; nextln:  uxtb w0, w0
; nextln:  and w1, w1, #7
; nextln:  sub w2, w1, #8
; nextln:  sub w2, wzr, w2
; nextln:  lsr w1, w0, w1
; nextln:  lsl w0, w0, w2
; nextln:  orr w0, w0, w1
; nextln:  ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LSR, variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %f8(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ushr.i64 v0, v1
  return v2
}

; check:  lsr x0, x0, x1
; nextln:  ret

function %f9(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ushr.i32 v0, v1
  return v2
}

; check:  lsr w0, w0, w1
; nextln:  ret

function %f10(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = ushr.i16 v0, v1
  return v2
}

; check:  uxth w0, w0
; nextln:  and w1, w1, #15
; nextln:  lsr w0, w0, w1
; nextln:  ret

function %f11(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = ushr.i8 v0, v1
  return v2
}

; check:  uxtb w0, w0
; nextln:  and w1, w1, #7
; nextln:  lsr w0, w0, w1
; nextln:  ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LSL, variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %f12(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ishl.i64 v0, v1
  return v2
}

; check:  lsl x0, x0, x1
; nextln:  ret

function %f13(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ishl.i32 v0, v1
  return v2
}

; check:  lsl w0, w0, w1
; nextln:  ret

function %f14(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = ishl.i16 v0, v1
  return v2
}

; check:  and w1, w1, #15
; nextln:  lsl w0, w0, w1
; nextln:  ret

function %f15(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = ishl.i8 v0, v1
  return v2
}

; check:  and w1, w1, #7
; nextln:  lsl w0, w0, w1
; nextln:  ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ASR, variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %f16(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = sshr.i64 v0, v1
  return v2
}

; check:  asr x0, x0, x1
; nextln:  ret

function %f17(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = sshr.i32 v0, v1
  return v2
}

; check:  asr w0, w0, w1
; nextln:  ret

function %f18(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = sshr.i16 v0, v1
  return v2
}

; check:  and w1, w1, #15
; nextln:  asr w0, w0, w1
; nextln:  ret

function %f19(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = sshr.i8 v0, v1
  return v2
}

; check:  and w1, w1, #7
; nextln:  asr w0, w0, w1
; nextln:  ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; immediate forms
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %f20(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = rotr.i64 v0, v1
  return v2
}

; check:  ror x0, x0, #17
; nextln:  ret

function %f21(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = rotl.i64 v0, v1
  return v2
}

; check:  ror x0, x0, #47
; nextln:  ret

function %f22(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 17
  v2 = rotl.i32 v0, v1
  return v2
}

; check:  ror w0, w0, #15
; nextln:  ret

function %f23(i16) -> i16 {
block0(v0: i16):
  v1 = iconst.i32 10
  v2 = rotl.i16 v0, v1
  return v2
}

; check: uxth w0, w0
; nextln: lsr w1, w0, #6
; nextln: lsl w0, w0, #10
; nextln: orr w0, w0, w1
; nextln: ret

function %f24(i8) -> i8 {
block0(v0: i8):
  v1 = iconst.i32 3
  v2 = rotl.i8 v0, v1
  return v2
}

; check:  uxtb w0, w0
; nextln:  lsr w1, w0, #5
; nextln:  lsl w0, w0, #3
; nextln:  orr w0, w0, w1
; nextln:  ret

function %f25(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = ushr.i64 v0, v1
  return v2
}

; check:  lsr x0, x0, #17
; nextln:  ret

function %f26(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = sshr.i64 v0, v1
  return v2
}

; check:  asr x0, x0, #17
; nextln:  ret

function %f27(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = ishl.i64 v0, v1
  return v2
}

; check:  lsl x0, x0, #17
; nextln:  ret
