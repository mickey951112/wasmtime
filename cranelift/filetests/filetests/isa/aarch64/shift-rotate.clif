test compile precise-output
set unwind_info=false
target aarch64

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ROR, variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %i128_rotr(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = rotr.i128 v0, v1
  return v2
}

; block0:
;   orr x10, xzr, #128
;   sub x12, x10, x2
;   lsr x14, x0, x2
;   lsr x3, x1, x2
;   orn w4, wzr, w2
;   lsl x5, x1, #1
;   lsl x6, x5, x4
;   orr x8, x14, x6
;   ands xzr, x2, #64
;   csel x11, x3, x8, ne
;   csel x13, xzr, x3, ne
;   lsl x15, x0, x12
;   lsl x1, x1, x12
;   orn w3, wzr, w12
;   lsr x5, x0, #1
;   lsr x7, x5, x3
;   orr x9, x1, x7
;   ands xzr, x12, #64
;   csel x12, xzr, x15, ne
;   csel x14, x15, x9, ne
;   orr x1, x13, x14
;   orr x0, x11, x12
;   ret

function %f0(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = rotr.i64 v0, v1
  return v2
}

; block0:
;   ror x0, x0, x1
;   ret

function %f1(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = rotr.i32 v0, v1
  return v2
}

; block0:
;   ror w0, w0, w1
;   ret

function %f2(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = rotr.i16 v0, v1
  return v2
}

; block0:
;   uxth w5, w0
;   and w7, w1, #15
;   sub w9, w7, #16
;   sub w11, wzr, w9
;   lsr w13, w5, w7
;   lsl w15, w5, w11
;   orr w0, w15, w13
;   ret

function %f3(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = rotr.i8 v0, v1
  return v2
}

; block0:
;   uxtb w5, w0
;   and w7, w1, #7
;   sub w9, w7, #8
;   sub w11, wzr, w9
;   lsr w13, w5, w7
;   lsl w15, w5, w11
;   orr w0, w15, w13
;   ret

function %i128_rotl(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = rotl.i128 v0, v1
  return v2
}

; block0:
;   orr x10, xzr, #128
;   sub x12, x10, x2
;   lsl x14, x0, x2
;   lsl x3, x1, x2
;   orn w4, wzr, w2
;   lsr x5, x0, #1
;   lsr x6, x5, x4
;   orr x8, x3, x6
;   ands xzr, x2, #64
;   csel x11, xzr, x14, ne
;   csel x13, x14, x8, ne
;   lsr x15, x0, x12
;   lsr x2, x1, x12
;   orn w3, wzr, w12
;   lsl x5, x1, #1
;   lsl x7, x5, x3
;   orr x9, x15, x7
;   ands xzr, x12, #64
;   csel x12, x2, x9, ne
;   csel x14, xzr, x2, ne
;   orr x0, x11, x12
;   orr x1, x13, x14
;   ret

function %f4(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = rotl.i64 v0, v1
  return v2
}

; block0:
;   sub x5, xzr, x1
;   ror x0, x0, x5
;   ret

function %f5(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = rotl.i32 v0, v1
  return v2
}

; block0:
;   sub w5, wzr, w1
;   ror w0, w0, w5
;   ret

function %f6(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = rotl.i16 v0, v1
  return v2
}

; block0:
;   sub w5, wzr, w1
;   uxth w7, w0
;   and w9, w5, #15
;   sub w11, w9, #16
;   sub w13, wzr, w11
;   lsr w15, w7, w9
;   lsl w1, w7, w13
;   orr w0, w1, w15
;   ret

function %f7(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = rotl.i8 v0, v1
  return v2
}

; block0:
;   sub w5, wzr, w1
;   uxtb w7, w0
;   and w9, w5, #7
;   sub w11, w9, #8
;   sub w13, wzr, w11
;   lsr w15, w7, w9
;   lsl w1, w7, w13
;   orr w0, w1, w15
;   ret

function %f8(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ushr.i64 v0, v1
  return v2
}

; block0:
;   lsr x0, x0, x1
;   ret

function %f9(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ushr.i32 v0, v1
  return v2
}

; block0:
;   lsr w0, w0, w1
;   ret

function %f10(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = ushr.i16 v0, v1
  return v2
}

; block0:
;   uxth w5, w0
;   and w7, w1, #15
;   lsr w0, w5, w7
;   ret

function %f11(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = ushr.i8 v0, v1
  return v2
}

; block0:
;   uxtb w5, w0
;   and w7, w1, #7
;   lsr w0, w5, w7
;   ret

function %f12(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ishl.i64 v0, v1
  return v2
}

; block0:
;   lsl x0, x0, x1
;   ret

function %f13(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ishl.i32 v0, v1
  return v2
}

; block0:
;   lsl w0, w0, w1
;   ret

function %f14(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = ishl.i16 v0, v1
  return v2
}

; block0:
;   and w5, w1, #15
;   lsl w0, w0, w5
;   ret

function %f15(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = ishl.i8 v0, v1
  return v2
}

; block0:
;   and w5, w1, #7
;   lsl w0, w0, w5
;   ret

function %f16(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = sshr.i64 v0, v1
  return v2
}

; block0:
;   asr x0, x0, x1
;   ret

function %f17(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = sshr.i32 v0, v1
  return v2
}

; block0:
;   asr w0, w0, w1
;   ret

function %f18(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = sshr.i16 v0, v1
  return v2
}

; block0:
;   sxth w5, w0
;   and w7, w1, #15
;   asr w0, w5, w7
;   ret

function %f19(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = sshr.i8 v0, v1
  return v2
}

; block0:
;   sxtb w5, w0
;   and w7, w1, #7
;   asr w0, w5, w7
;   ret

function %f20(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = rotr.i64 v0, v1
  return v2
}

; block0:
;   ror x0, x0, #17
;   ret

function %f21(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = rotl.i64 v0, v1
  return v2
}

; block0:
;   ror x0, x0, #47
;   ret

function %f22(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 17
  v2 = rotl.i32 v0, v1
  return v2
}

; block0:
;   ror w0, w0, #15
;   ret

function %f23(i16) -> i16 {
block0(v0: i16):
  v1 = iconst.i32 10
  v2 = rotl.i16 v0, v1
  return v2
}

; block0:
;   uxth w3, w0
;   lsr w5, w3, #6
;   lsl w7, w3, #10
;   orr w0, w7, w5
;   ret

function %f24(i8) -> i8 {
block0(v0: i8):
  v1 = iconst.i32 3
  v2 = rotl.i8 v0, v1
  return v2
}

; block0:
;   uxtb w3, w0
;   lsr w5, w3, #5
;   lsl w7, w3, #3
;   orr w0, w7, w5
;   ret

function %f25(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = ushr.i64 v0, v1
  return v2
}

; block0:
;   lsr x0, x0, #17
;   ret

function %f26(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = sshr.i64 v0, v1
  return v2
}

; block0:
;   asr x0, x0, #17
;   ret

function %f27(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = ishl.i64 v0, v1
  return v2
}

; block0:
;   lsl x0, x0, #17
;   ret

