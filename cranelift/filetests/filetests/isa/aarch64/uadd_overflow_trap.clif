test compile precise-output
target aarch64

function %f0(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 127
    v2 = uadd_overflow_trap v0, v1, user0
    return v2
}

; VCode:
; block0:
;   movz w2, #127
;   adds w0, w0, w2
;   b.lo 8 ; udf
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   mov w2, #0x7f
;   adds w0, w0, w2
;   b.lo #0x10
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: user0
;   ret

function %f1(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 127
    v2 = uadd_overflow_trap v1, v0, user0
    return v2
}

; VCode:
; block0:
;   movz w2, #127
;   adds w0, w2, w0
;   b.lo 8 ; udf
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   mov w2, #0x7f
;   adds w0, w2, w0
;   b.lo #0x10
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: user0
;   ret

function %f2(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = uadd_overflow_trap v0, v1, user0
    return v2
}

; VCode:
; block0:
;   adds w0, w0, w1
;   b.lo 8 ; udf
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   adds w0, w0, w1
;   b.lo #0xc
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: user0
;   ret

function %f3(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 127
    v2 = uadd_overflow_trap v0, v1, user0
    return v2
}

; VCode:
; block0:
;   movz x2, #127
;   adds x0, x0, x2
;   b.lo 8 ; udf
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   mov x2, #0x7f
;   adds x0, x0, x2
;   b.lo #0x10
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: user0
;   ret

function %f3(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 127
    v2 = uadd_overflow_trap v1, v0, user0
    return v2
}

; VCode:
; block0:
;   movz x2, #127
;   adds x0, x2, x0
;   b.lo 8 ; udf
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   mov x2, #0x7f
;   adds x0, x2, x0
;   b.lo #0x10
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: user0
;   ret

function %f4(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = uadd_overflow_trap v0, v1, user0
    return v2
}

; VCode:
; block0:
;   adds x0, x0, x1
;   b.lo 8 ; udf
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   adds x0, x0, x1
;   b.lo #0xc
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: user0
;   ret

