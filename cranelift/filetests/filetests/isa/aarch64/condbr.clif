test compile
set unwind_info=false
target aarch64

function %f(i64, i64) -> b1 {
block0(v0: i64, v1: i64):
  v2 = icmp eq v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x1
; nextln: cset x0, eq
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %icmp_eq_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp eq v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: eor x0, x0, x2
; nextln: eor x1, x1, x3
; nextln: adds xzr, x0, x1
; nextln: cset x0, eq
; nextln: ldp fp, lr, [sp], #16
; nextln: ret


function %icmp_ne_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ne v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: eor x0, x0, x2
; nextln: eor x1, x1, x3
; nextln: adds xzr, x0, x1
; nextln: cset x0, ne
; nextln: ldp fp, lr, [sp], #16
; nextln: ret


function %icmp_slt_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp slt v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, lo
; nextln: subs xzr, x1, x3
; nextln: cset x1, lt
; nextln: csel x0, x0, x1, eq
; nextln: ldp fp, lr, [sp], #16
; nextln: ret


function %icmp_ult_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ult v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, lo
; nextln: subs xzr, x1, x3
; nextln: cset x1, lo
; nextln: csel x0, x0, x1, eq
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %icmp_sle_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp sle v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, ls
; nextln: subs xzr, x1, x3
; nextln: cset x1, le
; nextln: csel x0, x0, x1, eq
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %icmp_ule_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ule v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, ls
; nextln: subs xzr, x1, x3
; nextln: cset x1, ls
; nextln: csel x0, x0, x1, eq
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %icmp_sgt_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp sgt v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, hi
; nextln: subs xzr, x1, x3
; nextln: cset x1, gt
; nextln: csel x0, x0, x1, eq
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %icmp_ugt_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ugt v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, hi
; nextln: subs xzr, x1, x3
; nextln: cset x1, hi
; nextln: csel x0, x0, x1, eq
; nextln: ldp fp, lr, [sp], #16
; nextln: ret


function %icmp_sge_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp sge v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, hs
; nextln: subs xzr, x1, x3
; nextln: cset x1, ge
; nextln: csel x0, x0, x1, eq
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %icmp_uge_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp uge v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, hs
; nextln: subs xzr, x1, x3
; nextln: cset x1, hs
; nextln: csel x0, x0, x1, eq
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %icmp_of_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp of v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: adds xzr, x0, x2
; nextln: adcs xzr, x1, x3
; nextln: cset x0, vs
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %icmp_nof_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp nof v0, v1
  return v2
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: adds xzr, x0, x2
; nextln: adcs xzr, x1, x3
; nextln: cset x0, vc
; nextln: ldp fp, lr, [sp], #16
; nextln: ret


function %f(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ifcmp v0, v1
  brif eq v2, block1
  jump block2

block1:
  v4 = iconst.i64 1
  return v4

block2:
  v5 = iconst.i64 2
  return v5
}

; check: Block 0:
; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x1
; nextln: b.eq label1 ; b label2
; check: Block 1:
; check: movz x0, #1
; nextln: ldp fp, lr, [sp], #16
; nextln: ret
; check: Block 2:
; check: movz x0, #2
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ifcmp v0, v1
  brif eq v2, block1
  jump block1

block1:
  v4 = iconst.i64 1
  return v4
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x1
; check: Block 1:
; check: movz x0, #1
; nextln: ldp fp, lr, [sp], #16
; nextln: ret


function %i128_brz(i128){
block0(v0: i128):
    brz v0, block1
    jump block1

block1:
    nop
    return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: orr x0, x0, x1
; nextln: cbz x0, label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret


function %i128_brnz(i128){
block0(v0: i128):
    brnz v0, block1
    jump block1

block1:
    nop
    return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: orr x0, x0, x1
; nextln: cbnz x0, label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret



function %i128_bricmp_eq(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp eq v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: eor x0, x0, x2
; nextln: eor x1, x1, x3
; nextln: adds xzr, x0, x1
; nextln: b.eq label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret


function %i128_bricmp_ne(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ne v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: eor x0, x0, x2
; nextln: eor x1, x1, x3
; nextln: adds xzr, x0, x1
; nextln: b.ne label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret


function %i128_bricmp_slt(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp slt v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, lo
; nextln: subs xzr, x1, x3
; nextln: cset x1, lt
; nextln: csel x0, x0, x1, eq
; nextln: subs xzr, xzr, x0
; nextln: b.lt label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret


function %i128_bricmp_ult(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ult v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, lo
; nextln: subs xzr, x1, x3
; nextln: cset x1, lo
; nextln: csel x0, x0, x1, eq
; nextln: subs xzr, xzr, x0
; nextln: b.lo label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret

function %i128_bricmp_sle(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp sle v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, ls
; nextln: subs xzr, x1, x3
; nextln: cset x1, le
; nextln: csel x0, x0, x1, eq
; nextln: movz x1, #1
; nextln: subs xzr, x1, x0
; nextln: b.le label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret

function %i128_bricmp_ule(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ule v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, ls
; nextln: subs xzr, x1, x3
; nextln: cset x1, ls
; nextln: csel x0, x0, x1, eq
; nextln: movz x1, #1
; nextln: subs xzr, x1, x0
; nextln: b.ls label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret

function %i128_bricmp_sgt(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp sgt v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, hi
; nextln: subs xzr, x1, x3
; nextln: cset x1, gt
; nextln: csel x0, x0, x1, eq
; nextln: subs xzr, x0, xzr
; nextln: b.gt label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret

function %i128_bricmp_ugt(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ugt v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, hi
; nextln: subs xzr, x1, x3
; nextln: cset x1, hi
; nextln: csel x0, x0, x1, eq
; nextln: subs xzr, x0, xzr
; nextln: b.hi label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret


function %i128_bricmp_sge(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp sge v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, hs
; nextln: subs xzr, x1, x3
; nextln: cset x1, ge
; nextln: csel x0, x0, x1, eq
; nextln: movz x1, #1
; nextln: subs xzr, x0, x1
; nextln: b.ge label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret

function %i128_bricmp_uge(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp uge v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: subs xzr, x0, x2
; nextln: cset x0, hs
; nextln: subs xzr, x1, x3
; nextln: cset x1, hs
; nextln: csel x0, x0, x1, eq
; nextln: movz x1, #1
; nextln: subs xzr, x0, x1
; nextln: b.hs label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret

function %i128_bricmp_of(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp of v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: adds xzr, x0, x2
; nextln: adcs xzr, x1, x3
; nextln: b.vs label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret

function %i128_bricmp_nof(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp nof v0, v1, block1
  jump block1

block1:
  return
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: adds xzr, x0, x2
; nextln: adcs xzr, x1, x3
; nextln: b.vc label1 ; b label2
; check: Block 1:
; check: b label3
; check: Block 2:
; check: b label3
; check: Block 3:
; check: ldp fp, lr, [sp], #16
; nextln: ret
