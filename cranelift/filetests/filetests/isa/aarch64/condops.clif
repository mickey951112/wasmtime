test compile precise-output
set unwind_info=false
target aarch64

function %f(i8, i8, i8) -> i8 {
block0(v0: i8, v1: i8, v2: i8):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = selectif.i8 eq v4, v1, v2
  return v5
}

; block0:
;   uxtb w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i8, i16, i16) -> i16 {
block0(v0: i8, v1: i16, v2: i16):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = selectif.i16 eq v4, v1, v2
  return v5
}

; block0:
;   uxtb w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i8, i32, i32) -> i32 {
block0(v0: i8, v1: i32, v2: i32):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = selectif.i32 eq v4, v1, v2
  return v5
}

; block0:
;   uxtb w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i8, i64, i64) -> i64 {
block0(v0: i8, v1: i64, v2: i64):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = selectif.i64 eq v4, v1, v2
  return v5
}

; block0:
;   uxtb w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i8, i128, i128) -> i128 {
block0(v0: i8, v1: i128, v2: i128):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = selectif.i128 eq v4, v1, v2
  return v5
}

; block0:
;   uxtb w8, w0
;   subs wzr, w8, #42
;   csel x0, x2, x4, eq
;   csel x1, x3, x5, eq
;   ret

function %f(i16, i8, i8) -> i8 {
block0(v0: i16, v1: i8, v2: i8):
  v3 = iconst.i16 42
  v4 = ifcmp v0, v3
  v5 = selectif.i8 eq v4, v1, v2
  return v5
}

; block0:
;   uxth w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i16, i16, i16) -> i16 {
block0(v0: i16, v1: i16, v2: i16):
  v3 = iconst.i16 42
  v4 = ifcmp v0, v3
  v5 = selectif.i16 eq v4, v1, v2
  return v5
}

; block0:
;   uxth w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i16, i32, i32) -> i32 {
block0(v0: i16, v1: i32, v2: i32):
  v3 = iconst.i16 42
  v4 = ifcmp v0, v3
  v5 = selectif.i32 eq v4, v1, v2
  return v5
}

; block0:
;   uxth w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i16, i64, i64) -> i64 {
block0(v0: i16, v1: i64, v2: i64):
  v3 = iconst.i16 42
  v4 = ifcmp v0, v3
  v5 = selectif.i64 eq v4, v1, v2
  return v5
}

; block0:
;   uxth w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i16, i128, i128) -> i128 {
block0(v0: i16, v1: i128, v2: i128):
  v3 = iconst.i16 42
  v4 = ifcmp v0, v3
  v5 = selectif.i128 eq v4, v1, v2
  return v5
}

; block0:
;   uxth w8, w0
;   subs wzr, w8, #42
;   csel x0, x2, x4, eq
;   csel x1, x3, x5, eq
;   ret

function %f(i32, i8, i8) -> i8 {
block0(v0: i32, v1: i8, v2: i8):
  v3 = iconst.i32 42
  v4 = ifcmp v0, v3
  v5 = selectif.i8 eq v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i32, i16, i16) -> i16 {
block0(v0: i32, v1: i16, v2: i16):
  v3 = iconst.i32 42
  v4 = ifcmp v0, v3
  v5 = selectif.i16 eq v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
  v3 = iconst.i32 42
  v4 = ifcmp v0, v3
  v5 = selectif.i32 eq v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i32, i64, i64) -> i64 {
block0(v0: i32, v1: i64, v2: i64):
  v3 = iconst.i32 42
  v4 = ifcmp v0, v3
  v5 = selectif.i64 eq v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i32, i128, i128) -> i128 {
block0(v0: i32, v1: i128, v2: i128):
  v3 = iconst.i32 42
  v4 = ifcmp v0, v3
  v5 = selectif.i128 eq v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x2, x4, eq
;   csel x1, x3, x5, eq
;   ret

function %f(i64, i8, i8) -> i8 {
block0(v0: i64, v1: i8, v2: i8):
  v3 = iconst.i64 42
  v4 = ifcmp v0, v3
  v5 = selectif.i8 eq v4, v1, v2
  return v5
}

; block0:
;   subs xzr, x0, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i64, i16, i16) -> i16 {
block0(v0: i64, v1: i16, v2: i16):
  v3 = iconst.i64 42
  v4 = ifcmp v0, v3
  v5 = selectif.i16 eq v4, v1, v2
  return v5
}

; block0:
;   subs xzr, x0, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i64, i32, i32) -> i32 {
block0(v0: i64, v1: i32, v2: i32):
  v3 = iconst.i64 42
  v4 = ifcmp v0, v3
  v5 = selectif.i32 eq v4, v1, v2
  return v5
}

; block0:
;   subs xzr, x0, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i64 42
  v4 = ifcmp v0, v3
  v5 = selectif.i64 eq v4, v1, v2
  return v5
}

; block0:
;   subs xzr, x0, #42
;   csel x0, x1, x2, eq
;   ret

function %f(i64, i128, i128) -> i128 {
block0(v0: i64, v1: i128, v2: i128):
  v3 = iconst.i64 42
  v4 = ifcmp v0, v3
  v5 = selectif.i128 eq v4, v1, v2
  return v5
}

; block0:
;   subs xzr, x0, #42
;   csel x0, x2, x4, eq
;   csel x1, x3, x5, eq
;   ret

function %f(i128, i8, i8) -> i8 {
block0(v0: i128, v1: i8, v2: i8):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = ifcmp v0, v4
  v6 = selectif.i8 eq v5, v1, v2
  return v6
}

; block0:
;   movz x7, #42
;   movz w9, #0
;   subs xzr, x0, x7
;   ccmp x1, x9, #nzcv, eq
;   csel x0, x2, x3, eq
;   ret

function %f(i128, i16, i16) -> i16 {
block0(v0: i128, v1: i16, v2: i16):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = ifcmp v0, v4
  v6 = selectif.i16 eq v5, v1, v2
  return v6
}

; block0:
;   movz x7, #42
;   movz w9, #0
;   subs xzr, x0, x7
;   ccmp x1, x9, #nzcv, eq
;   csel x0, x2, x3, eq
;   ret

function %f(i128, i32, i32) -> i32 {
block0(v0: i128, v1: i32, v2: i32):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = ifcmp v0, v4
  v6 = selectif.i32 eq v5, v1, v2
  return v6
}

; block0:
;   movz x7, #42
;   movz w9, #0
;   subs xzr, x0, x7
;   ccmp x1, x9, #nzcv, eq
;   csel x0, x2, x3, eq
;   ret

function %f(i128, i64, i64) -> i64 {
block0(v0: i128, v1: i64, v2: i64):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = ifcmp v0, v4
  v6 = selectif.i64 eq v5, v1, v2
  return v6
}

; block0:
;   movz x7, #42
;   movz w9, #0
;   subs xzr, x0, x7
;   ccmp x1, x9, #nzcv, eq
;   csel x0, x2, x3, eq
;   ret

function %f(i128, i128, i128) -> i128 {
block0(v0: i128, v1: i128, v2: i128):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = ifcmp v0, v4
  v6 = selectif.i128 eq v5, v1, v2
  return v6
}

; block0:
;   movz x11, #42
;   movz w13, #0
;   subs xzr, x0, x11
;   ccmp x1, x13, #nzcv, eq
;   csel x0, x2, x4, eq
;   csel x1, x3, x5, eq
;   ret

function %f(i8, i8, i8) -> i8 {
block0(v0: i8, v1: i8, v2: i8):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i8 eq v4, v1, v2
  return v5
}

; block0:
;   uxtb w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i8, i16, i16) -> i16 {
block0(v0: i8, v1: i16, v2: i16):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i16 eq v4, v1, v2
  return v5
}

; block0:
;   uxtb w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i8, i32, i32) -> i32 {
block0(v0: i8, v1: i32, v2: i32):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i32 eq v4, v1, v2
  return v5
}

; block0:
;   uxtb w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i8, i64, i64) -> i64 {
block0(v0: i8, v1: i64, v2: i64):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i64 eq v4, v1, v2
  return v5
}

; block0:
;   uxtb w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i8, i128, i128) -> i128 {
block0(v0: i8, v1: i128, v2: i128):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i128 eq v4, v1, v2
  return v5
}

; block0:
;   uxtb w8, w0
;   subs wzr, w8, #42
;   csel x0, x2, x4, eq
;   csel x1, x3, x5, eq
;   csdb
;   ret

function %f(i16, i8, i8) -> i8 {
block0(v0: i16, v1: i8, v2: i8):
  v3 = iconst.i16 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i8 eq v4, v1, v2
  return v5
}

; block0:
;   uxth w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i16, i16, i16) -> i16 {
block0(v0: i16, v1: i16, v2: i16):
  v3 = iconst.i16 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i16 eq v4, v1, v2
  return v5
}

; block0:
;   uxth w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i16, i32, i32) -> i32 {
block0(v0: i16, v1: i32, v2: i32):
  v3 = iconst.i16 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i32 eq v4, v1, v2
  return v5
}

; block0:
;   uxth w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i16, i64, i64) -> i64 {
block0(v0: i16, v1: i64, v2: i64):
  v3 = iconst.i16 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i64 eq v4, v1, v2
  return v5
}

; block0:
;   uxth w5, w0
;   subs wzr, w5, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i16, i128, i128) -> i128 {
block0(v0: i16, v1: i128, v2: i128):
  v3 = iconst.i16 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i128 eq v4, v1, v2
  return v5
}

; block0:
;   uxth w8, w0
;   subs wzr, w8, #42
;   csel x0, x2, x4, eq
;   csel x1, x3, x5, eq
;   csdb
;   ret

function %f(i32, i8, i8) -> i8 {
block0(v0: i32, v1: i8, v2: i8):
  v3 = iconst.i32 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i8 eq v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i32, i16, i16) -> i16 {
block0(v0: i32, v1: i16, v2: i16):
  v3 = iconst.i32 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i16 eq v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
  v3 = iconst.i32 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i32 eq v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i32, i64, i64) -> i64 {
block0(v0: i32, v1: i64, v2: i64):
  v3 = iconst.i32 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i64 eq v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i32, i128, i128) -> i128 {
block0(v0: i32, v1: i128, v2: i128):
  v3 = iconst.i32 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i128 eq v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x2, x4, eq
;   csel x1, x3, x5, eq
;   csdb
;   ret

function %f(i64, i8, i8) -> i8 {
block0(v0: i64, v1: i8, v2: i8):
  v3 = iconst.i64 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i8 eq v4, v1, v2
  return v5
}

; block0:
;   subs xzr, x0, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i64, i16, i16) -> i16 {
block0(v0: i64, v1: i16, v2: i16):
  v3 = iconst.i64 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i16 eq v4, v1, v2
  return v5
}

; block0:
;   subs xzr, x0, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i64, i32, i32) -> i32 {
block0(v0: i64, v1: i32, v2: i32):
  v3 = iconst.i64 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i32 eq v4, v1, v2
  return v5
}

; block0:
;   subs xzr, x0, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i64 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i64 eq v4, v1, v2
  return v5
}

; block0:
;   subs xzr, x0, #42
;   csel x0, x1, x2, eq
;   csdb
;   ret

function %f(i64, i128, i128) -> i128 {
block0(v0: i64, v1: i128, v2: i128):
  v3 = iconst.i64 42
  v4 = ifcmp v0, v3
  v5 = selectif_spectre_guard.i128 eq v4, v1, v2
  return v5
}

; block0:
;   subs xzr, x0, #42
;   csel x0, x2, x4, eq
;   csel x1, x3, x5, eq
;   csdb
;   ret

function %f(i128, i8, i8) -> i8 {
block0(v0: i128, v1: i8, v2: i8):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = ifcmp v0, v4
  v6 = selectif_spectre_guard.i8 eq v5, v1, v2
  return v6
}

; block0:
;   movz x7, #42
;   movz w9, #0
;   subs xzr, x0, x7
;   ccmp x1, x9, #nzcv, eq
;   csel x0, x2, x3, eq
;   csdb
;   ret

function %f(i128, i16, i16) -> i16 {
block0(v0: i128, v1: i16, v2: i16):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = ifcmp v0, v4
  v6 = selectif_spectre_guard.i16 eq v5, v1, v2
  return v6
}

; block0:
;   movz x7, #42
;   movz w9, #0
;   subs xzr, x0, x7
;   ccmp x1, x9, #nzcv, eq
;   csel x0, x2, x3, eq
;   csdb
;   ret

function %f(i128, i32, i32) -> i32 {
block0(v0: i128, v1: i32, v2: i32):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = ifcmp v0, v4
  v6 = selectif_spectre_guard.i32 eq v5, v1, v2
  return v6
}

; block0:
;   movz x7, #42
;   movz w9, #0
;   subs xzr, x0, x7
;   ccmp x1, x9, #nzcv, eq
;   csel x0, x2, x3, eq
;   csdb
;   ret

function %f(i128, i64, i64) -> i64 {
block0(v0: i128, v1: i64, v2: i64):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = ifcmp v0, v4
  v6 = selectif_spectre_guard.i64 eq v5, v1, v2
  return v6
}

; block0:
;   movz x7, #42
;   movz w9, #0
;   subs xzr, x0, x7
;   ccmp x1, x9, #nzcv, eq
;   csel x0, x2, x3, eq
;   csdb
;   ret

function %f(i128, i128, i128) -> i128 {
block0(v0: i128, v1: i128, v2: i128):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = ifcmp v0, v4
  v6 = selectif_spectre_guard.i128 eq v5, v1, v2
  return v6
}

; block0:
;   movz x11, #42
;   movz w13, #0
;   subs xzr, x0, x11
;   ccmp x1, x13, #nzcv, eq
;   csel x0, x2, x4, eq
;   csel x1, x3, x5, eq
;   csdb
;   ret

function %g(i8) -> i8 {
block0(v0: i8):
  v3 = iconst.i8 42
  v4 = ifcmp v0, v3
  v5 = trueif eq v4
  return v5
}

; block0:
;   uxtb w3, w0
;   subs wzr, w3, #42
;   cset x0, eq
;   ret

function %h(i8, i8, i8) -> i8 {
block0(v0: i8, v1: i8, v2: i8):
  v3 = bitselect.i8 v0, v1, v2
  return v3
}

; block0:
;   and w5, w1, w0
;   bic w7, w2, w0
;   orr w0, w5, w7
;   ret

function %i(i8, i8, i8) -> i8 {
block0(v0: i8, v1: i8, v2: i8):
  v3 = select.i8 v0, v1, v2
  return v3
}

; block0:
;   ands wzr, w0, #255
;   csel x0, x1, x2, ne
;   ret

function %i(i32, i8, i8) -> i8 {
block0(v0: i32, v1: i8, v2: i8):
  v3 = iconst.i32 42
  v4 = icmp.i32 eq v0, v3
  v5 = select.i8 v4, v1, v2
  return v5
}

; block0:
;   subs wzr, w0, #42
;   csel x0, x1, x2, eq
;   ret

function %i128_select(i8, i128, i128) -> i128 {
block0(v0: i8, v1: i128, v2: i128):
  v3 = select.i128 v0, v1, v2
  return v3
}

; block0:
;   ands wzr, w0, #255
;   csel x0, x2, x4, ne
;   csel x1, x3, x5, ne
;   ret

