test run
set enable_simd

function %test_shuffle_different_ssa_values() -> b1 {
block0:
    v0 = vconst.i8x16 0x00
    v1 = vconst.i8x16 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42]
    v2 = shuffle v0, v1, [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 31]     ; use the first lane of v0 throughout except use the last lane of v1
    v3 = extractlane.i8x16 v2, 15
    v4 = iconst.i8 42
    v5 = icmp eq v3, v4
    return v5
}

; run

function %test_shuffle_same_ssa_value() -> b1 {
block0:
    v0 = vconst.i8x16 0x01000000_00000000_00000000_00000000     ; note where lane 15 is when written with hexadecimal syntax
    v1 = shuffle v0, v0, 0x0f0f0f0f_0f0f0f0f_0f0f0f0f_0f0f0f0f  ; use the last lane of v0 to fill all lanes
    v2 = extractlane.i8x16 v1, 4
    v3 = iconst.i8 0x01
    v4 = icmp eq v2, v3
    return v4
}

; run

function %compare_shuffle() -> b1 {
block0:
    v1 = vconst.i32x4 [0 1 2 3]
    v2 = raw_bitcast.i8x16  v1 ; we have to cast because shuffle is type-limited to Tx16
    ; keep each lane in place from the first vector
    v3 = shuffle v2, v2, [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
    v4 = raw_bitcast.i32x4 v3
    v5 = extractlane.i32x4 v4, 3
    v6 = icmp_imm eq v5, 3
    v7 = extractlane.i32x4 v4, 0
    v8 = icmp_imm eq v7, 0
    v9 = band v6, v8
    return v9
}

; run


function %compare_shuffle() -> b32 {
block0:
    v1 = vconst.b32x4 [true false true false]
    v2 = raw_bitcast.b8x16 v1 ; we have to cast because shuffle is type-limited to Tx16
    ; pair up the true values to make the entire vector true
    v3 = shuffle v2, v2, [0 1 2 3 0 1 2 3 8 9 10 11 8 9 10 11]
    v4 = raw_bitcast.b32x4 v3
    v5 = extractlane v4, 3
    v6 = extractlane v4, 0
    v7 = band v5, v6
    return v7
}

; run
