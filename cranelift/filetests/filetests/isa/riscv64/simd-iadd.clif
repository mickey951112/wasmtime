test compile precise-output
set unwind_info=false
target riscv64 has_v


function %iadd_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = iadd v0, v1
    return v2
}

; VCode:
; block0:
;   vadd.vv v10,v10,v11 #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x57, 0x85, 0xa5, 0x02
;   ret

function %iadd_i16x8(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
    v2 = iadd v0, v1
    return v2
}

; VCode:
; block0:
;   vadd.vv v10,v10,v11 #avl=8, #vtype=(e16, m1, ta, ma)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x85, 0xa5, 0x02
;   ret

function %iadd_i32x4(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
    v2 = iadd v0, v1
    return v2
}

; VCode:
; block0:
;   vadd.vv v10,v10,v11 #avl=4, #vtype=(e32, m1, ta, ma)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x85, 0xa5, 0x02
;   ret

function %iadd_i64x2(i64x2, i64x2) -> i64x2 {
block0(v0: i64x2, v1: i64x2):
    v2 = iadd v0, v1
    return v2
}

; VCode:
; block0:
;   vadd.vv v10,v10,v11 #avl=2, #vtype=(e64, m1, ta, ma)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x85, 0xa5, 0x02
;   ret

function %iadd_const_i8x16(i8x16) -> i8x16 {
block0(v0: i8x16):
    v1 = iconst.i8 5
    v2 = splat.i8x16 v1
    v3 = iadd v0, v2
    return v3
}

; VCode:
; block0:
;   vadd.vi v10,v10,5 #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x57, 0xb5, 0xa2, 0x02
;   ret

function %iadd_const_i16x8(i16x8) -> i16x8 {
block0(v0: i16x8):
    v1 = iconst.i16 -16
    v2 = splat.i16x8 v1
    v3 = iadd v0, v2
    return v3
}

; VCode:
; block0:
;   vadd.vi v10,v10,-16 #avl=8, #vtype=(e16, m1, ta, ma)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x35, 0xa8, 0x02
;   ret

function %iadd_const_i32x4(i32x4) -> i32x4 {
block0(v0: i32x4):
    v1 = iconst.i32 15
    v2 = splat.i32x4 v1
    v3 = iadd v0, v2
    return v3
}

; VCode:
; block0:
;   vadd.vi v10,v10,15 #avl=4, #vtype=(e32, m1, ta, ma)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0xb5, 0xa7, 0x02
;   ret

function %iadd_const_i64x2(i64x2) -> i64x2 {
block0(v0: i64x2):
    v1 = iconst.i64 -5
    v2 = splat.i64x2 v1
    v3 = iadd v2, v0
    return v3
}

; VCode:
; block0:
;   vadd.vi v10,v10,-5 #avl=2, #vtype=(e64, m1, ta, ma)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb5, 0xad, 0x02
;   ret

