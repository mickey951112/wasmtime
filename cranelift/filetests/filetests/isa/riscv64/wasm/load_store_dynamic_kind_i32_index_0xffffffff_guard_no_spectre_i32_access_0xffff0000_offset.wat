;;! target = "riscv64"
;;!
;;! settings = ['enable_heap_access_spectre_mitigation=false']
;;!
;;! compile = true
;;!
;;! [globals.vmctx]
;;! type = "i64"
;;! vmctx = true
;;!
;;! [globals.heap_base]
;;! type = "i64"
;;! load = { base = "vmctx", offset = 0, readonly = true }
;;!
;;! [globals.heap_bound]
;;! type = "i64"
;;! load = { base = "vmctx", offset = 8, readonly = true }
;;!
;;! [[heaps]]
;;! base = "heap_base"
;;! min_size = 0x10000
;;! offset_guard_size = 0xffffffff
;;! index_type = "i32"
;;! style = { kind = "dynamic", bound = "heap_bound" }

;; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;; !!! GENERATED BY 'make-load-store-tests.sh' DO NOT EDIT !!!
;; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

(module
  (memory i32 1)

  (func (export "do_store") (param i32 i32)
    local.get 0
    local.get 1
    i32.store offset=0xffff0000)

  (func (export "do_load") (param i32) (result i32)
    local.get 0
    i32.load offset=0xffff0000))

;; function u0:0:
;; block0:
;;   slli t0,a0,32
;;   srli t2,t0,32
;;   auipc t4,0; ld t4,12(t4); j 12; .8byte 0xffff0004
;;   add t1,t2,t4
;;   ult a0,t1,t2##ty=i64
;;   trap_if a0,heap_oob
;;   ld a0,8(a2)
;;   ugt a0,t1,a0##ty=i64
;;   bne a0,zero,taken(label1),not_taken(label2)
;; block2:
;;   ld a2,0(a2)
;;   add a2,a2,t2
;;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xffff0000
;;   add a2,a2,a0
;;   sw a1,0(a2)
;;   j label3
;; block3:
;;   ret
;; block1:
;;   udf##trap_code=heap_oob
;;
;; function u0:1:
;; block0:
;;   slli t0,a0,32
;;   srli t2,t0,32
;;   auipc t4,0; ld t4,12(t4); j 12; .8byte 0xffff0004
;;   add t1,t2,t4
;;   ult a0,t1,t2##ty=i64
;;   trap_if a0,heap_oob
;;   ld a0,8(a1)
;;   ugt a0,t1,a0##ty=i64
;;   bne a0,zero,taken(label1),not_taken(label2)
;; block2:
;;   ld a1,0(a1)
;;   add a1,a1,t2
;;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xffff0000
;;   add a2,a1,a0
;;   lw a0,0(a2)
;;   j label3
;; block3:
;;   ret
;; block1:
;;   udf##trap_code=heap_oob
