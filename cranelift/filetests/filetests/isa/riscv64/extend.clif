test compile precise-output
set unwind_info=false
target riscv64


;;;; Uextend rules

function %uextend8_16(i8) -> i16 {
block0(v0: i8):
    v1 = uextend.i16 v0
    return v1
}

; VCode:
; block0:
;   andi a0,a0,255
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   andi a0, a0, 0xff
;   ret

function %uextend8_32(i8) -> i32 {
block0(v0: i8):
    v1 = uextend.i32 v0
    return v1
}

; VCode:
; block0:
;   andi a0,a0,255
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   andi a0, a0, 0xff
;   ret

function %uextend16_32(i16) -> i32 {
block0(v0: i16):
    v1 = uextend.i32 v0
    return v1
}

; VCode:
; block0:
;   slli t2,a0,48
;   srli a0,t2,48
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli t2, a0, 0x30
;   srli a0, t2, 0x30
;   ret

function %uextend8_64(i8) -> i64 {
block0(v0: i8):
    v1 = uextend.i64 v0
    return v1
}

; VCode:
; block0:
;   andi a0,a0,255
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   andi a0, a0, 0xff
;   ret

function %uextend16_64(i16) -> i64 {
block0(v0: i16):
    v1 = uextend.i64 v0
    return v1
}

; VCode:
; block0:
;   slli t2,a0,48
;   srli a0,t2,48
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli t2, a0, 0x30
;   srli a0, t2, 0x30
;   ret

function %uextend32_64(i32) -> i64 {
block0(v0: i32):
    v1 = uextend.i64 v0
    return v1
}

; VCode:
; block0:
;   slli t2,a0,32
;   srli a0,t2,32
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli t2, a0, 0x20
;   srli a0, t2, 0x20
;   ret

;;;; Sextend Rules

function %sextend8_16(i8) -> i16 {
block0(v0: i8):
    v1 = sextend.i16 v0
    return v1
}

; VCode:
; block0:
;   slli t2,a0,56
;   srai a0,t2,56
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli t2, a0, 0x38
;   srai a0, t2, 0x38
;   ret

function %sextend8_32(i8) -> i32 {
block0(v0: i8):
    v1 = sextend.i32 v0
    return v1
}

; VCode:
; block0:
;   slli t2,a0,56
;   srai a0,t2,56
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli t2, a0, 0x38
;   srai a0, t2, 0x38
;   ret

function %sextend16_32(i16) -> i32 {
block0(v0: i16):
    v1 = sextend.i32 v0
    return v1
}

; VCode:
; block0:
;   slli t2,a0,48
;   srai a0,t2,48
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli t2, a0, 0x30
;   srai a0, t2, 0x30
;   ret

function %sextend8_64(i8) -> i64 {
block0(v0: i8):
    v1 = sextend.i64 v0
    return v1
}

; VCode:
; block0:
;   slli t2,a0,56
;   srai a0,t2,56
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli t2, a0, 0x38
;   srai a0, t2, 0x38
;   ret

function %sextend16_64(i16) -> i64 {
block0(v0: i16):
    v1 = sextend.i64 v0
    return v1
}

; VCode:
; block0:
;   slli t2,a0,48
;   srai a0,t2,48
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli t2, a0, 0x30
;   srai a0, t2, 0x30
;   ret

function %sextend32_64(i32) -> i64 {
block0(v0: i32):
    v1 = sextend.i64 v0
    return v1
}

; VCode:
; block0:
;   sext.w a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   sext.w a0, a0
;   ret

function %f(i8) -> i64 {
block0(v0: i8):
  v1 = sextend.i64 v0
  v2 = iconst.i64 42
  v3 = iadd.i64 v2, v1
  return v3
}

; VCode:
; block0:
;   slli a0,a0,56
;   srai a2,a0,56
;   addi a0,a2,42
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a0, a0, 0x38
;   srai a2, a0, 0x38
;   addi a0, a2, 0x2a
;   ret

function %f2(i8, i64) -> i64 {
block0(v0: i8, v1: i64):
  v2 = sextend.i64 v0
  v3 = iadd.i64 v2, v1
  return v3
}

; VCode:
; block0:
;   slli a2,a0,56
;   srai a3,a2,56
;   add a0,a3,a1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a2, a0, 0x38
;   srai a3, a2, 0x38
;   add a0, a3, a1
;   ret

