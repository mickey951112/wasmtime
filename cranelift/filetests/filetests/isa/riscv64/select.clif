test compile precise-output
set unwind_info=false
target riscv64

function %select_icmp_i8_i8(i8, i8, i8) -> i8 {
block0(v0: i8, v1: i8, v2: i8):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a4,42
;   andi a3,a0,255
;   andi a4,a4,255
;   select_reg a0,a1,a2##condition=(a3 eq a4)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   andi a3, a0, 0xff
;   andi a4, a4, 0xff
;   beq a3, a4, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i8_i16(i8, i16, i16) -> i16 {
block0(v0: i8, v1: i16, v2: i16):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a4,42
;   andi a3,a0,255
;   andi a4,a4,255
;   select_reg a0,a1,a2##condition=(a3 eq a4)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   andi a3, a0, 0xff
;   andi a4, a4, 0xff
;   beq a3, a4, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i8_i32(i8, i32, i32) -> i32 {
block0(v0: i8, v1: i32, v2: i32):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a4,42
;   andi a3,a0,255
;   andi a4,a4,255
;   select_reg a0,a1,a2##condition=(a3 eq a4)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   andi a3, a0, 0xff
;   andi a4, a4, 0xff
;   beq a3, a4, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i8_i64(i8, i64, i64) -> i64 {
block0(v0: i8, v1: i64, v2: i64):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a4,42
;   andi a3,a0,255
;   andi a4,a4,255
;   select_reg a0,a1,a2##condition=(a3 eq a4)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   andi a3, a0, 0xff
;   andi a4, a4, 0xff
;   beq a3, a4, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i8_i128(i8, i128, i128) -> i128 {
block0(v0: i8, v1: i128, v2: i128):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.i128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   mv a5,a1
;   li t4,42
;   andi a7,a0,255
;   andi t4,t4,255
;   eq t1,a7,t4##ty=i8
;   andi a7,t1,255
;   select_i128 [a0,a1],[a5,a2],[a3,a4]##condition=a7
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ori a5, a1, 0
;   addi t4, zero, 0x2a
;   andi a7, a0, 0xff
;   andi t4, t4, 0xff
;   bne a7, t4, 0xc
;   addi t1, zero, 1
;   j 8
;   mv t1, zero
;   andi a7, t1, 0xff
;   beqz a7, 0x10
;   ori a0, a5, 0
;   ori a1, a2, 0
;   j 0xc
;   ori a0, a3, 0
;   ori a1, a4, 0
;   ret

function %select_icmp_i16_i8(i16, i8, i8) -> i8 {
block0(v0: i16, v1: i8, v2: i8):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a6,42
;   slli a3,a0,48
;   srli a4,a3,48
;   slli a6,a6,48
;   srli t3,a6,48
;   select_reg a0,a1,a2##condition=(a4 eq t3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   slli a3, a0, 0x30
;   srli a4, a3, 0x30
;   slli a6, a6, 0x30
;   srli t3, a6, 0x30
;   beq a4, t3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i16_i16(i16, i16, i16) -> i16 {
block0(v0: i16, v1: i16, v2: i16):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a6,42
;   slli a3,a0,48
;   srli a4,a3,48
;   slli a6,a6,48
;   srli t3,a6,48
;   select_reg a0,a1,a2##condition=(a4 eq t3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   slli a3, a0, 0x30
;   srli a4, a3, 0x30
;   slli a6, a6, 0x30
;   srli t3, a6, 0x30
;   beq a4, t3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i16_i32(i16, i32, i32) -> i32 {
block0(v0: i16, v1: i32, v2: i32):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a6,42
;   slli a3,a0,48
;   srli a4,a3,48
;   slli a6,a6,48
;   srli t3,a6,48
;   select_reg a0,a1,a2##condition=(a4 eq t3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   slli a3, a0, 0x30
;   srli a4, a3, 0x30
;   slli a6, a6, 0x30
;   srli t3, a6, 0x30
;   beq a4, t3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i16_i64(i16, i64, i64) -> i64 {
block0(v0: i16, v1: i64, v2: i64):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a6,42
;   slli a3,a0,48
;   srli a4,a3,48
;   slli a6,a6,48
;   srli t3,a6,48
;   select_reg a0,a1,a2##condition=(a4 eq t3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   slli a3, a0, 0x30
;   srli a4, a3, 0x30
;   slli a6, a6, 0x30
;   srli t3, a6, 0x30
;   beq a4, t3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i16_i128(i16, i128, i128) -> i128 {
block0(v0: i16, v1: i128, v2: i128):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.i128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   mv a6,a1
;   li t1,42
;   slli a7,a0,48
;   srli t4,a7,48
;   slli t1,t1,48
;   srli a0,t1,48
;   eq a5,t4,a0##ty=i16
;   andi t4,a5,255
;   select_i128 [a0,a1],[a6,a2],[a3,a4]##condition=t4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ori a6, a1, 0
;   addi t1, zero, 0x2a
;   slli a7, a0, 0x30
;   srli t4, a7, 0x30
;   slli t1, t1, 0x30
;   srli a0, t1, 0x30
;   bne t4, a0, 0xc
;   addi a5, zero, 1
;   j 8
;   mv a5, zero
;   andi t4, a5, 0xff
;   beqz t4, 0x10
;   ori a0, a6, 0
;   ori a1, a2, 0
;   j 0xc
;   ori a0, a3, 0
;   ori a1, a4, 0
;   ret

function %select_icmp_i32_i8(i32, i8, i8) -> i8 {
block0(v0: i32, v1: i8, v2: i8):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a6,42
;   slli a3,a0,32
;   srli a4,a3,32
;   slli a6,a6,32
;   srli t3,a6,32
;   select_reg a0,a1,a2##condition=(a4 eq t3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   slli a3, a0, 0x20
;   srli a4, a3, 0x20
;   slli a6, a6, 0x20
;   srli t3, a6, 0x20
;   beq a4, t3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i32_i16(i32, i16, i16) -> i16 {
block0(v0: i32, v1: i16, v2: i16):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a6,42
;   slli a3,a0,32
;   srli a4,a3,32
;   slli a6,a6,32
;   srli t3,a6,32
;   select_reg a0,a1,a2##condition=(a4 eq t3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   slli a3, a0, 0x20
;   srli a4, a3, 0x20
;   slli a6, a6, 0x20
;   srli t3, a6, 0x20
;   beq a4, t3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i32_i32(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a6,42
;   slli a3,a0,32
;   srli a4,a3,32
;   slli a6,a6,32
;   srli t3,a6,32
;   select_reg a0,a1,a2##condition=(a4 eq t3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   slli a3, a0, 0x20
;   srli a4, a3, 0x20
;   slli a6, a6, 0x20
;   srli t3, a6, 0x20
;   beq a4, t3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i32_i64(i32, i64, i64) -> i64 {
block0(v0: i32, v1: i64, v2: i64):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a6,42
;   slli a3,a0,32
;   srli a4,a3,32
;   slli a6,a6,32
;   srli t3,a6,32
;   select_reg a0,a1,a2##condition=(a4 eq t3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   slli a3, a0, 0x20
;   srli a4, a3, 0x20
;   slli a6, a6, 0x20
;   srli t3, a6, 0x20
;   beq a4, t3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i32_i128(i32, i128, i128) -> i128 {
block0(v0: i32, v1: i128, v2: i128):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.i128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   mv a6,a1
;   li t1,42
;   slli a7,a0,32
;   srli t4,a7,32
;   slli t1,t1,32
;   srli a0,t1,32
;   eq a5,t4,a0##ty=i32
;   andi t4,a5,255
;   select_i128 [a0,a1],[a6,a2],[a3,a4]##condition=t4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ori a6, a1, 0
;   addi t1, zero, 0x2a
;   slli a7, a0, 0x20
;   srli t4, a7, 0x20
;   slli t1, t1, 0x20
;   srli a0, t1, 0x20
;   bne t4, a0, 0xc
;   addi a5, zero, 1
;   j 8
;   mv a5, zero
;   andi t4, a5, 0xff
;   beqz t4, 0x10
;   ori a0, a6, 0
;   ori a1, a2, 0
;   j 0xc
;   ori a0, a3, 0
;   ori a1, a4, 0
;   ret

function %select_icmp_i64_i8(i64, i8, i8) -> i8 {
block0(v0: i64, v1: i8, v2: i8):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   select_reg a0,a1,a2##condition=(a0 eq a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   beq a0, a3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i64_i16(i64, i16, i16) -> i16 {
block0(v0: i64, v1: i16, v2: i16):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   select_reg a0,a1,a2##condition=(a0 eq a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   beq a0, a3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i64_i32(i64, i32, i32) -> i32 {
block0(v0: i64, v1: i32, v2: i32):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   select_reg a0,a1,a2##condition=(a0 eq a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   beq a0, a3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i64_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   select_reg a0,a1,a2##condition=(a0 eq a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   beq a0, a3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a1, 0
;   ret

function %select_icmp_i64_i128(i64, i128, i128) -> i128 {
block0(v0: i64, v1: i128, v2: i128):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.i128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   mv t1,a1
;   li a7,42
;   eq a7,a0,a7##ty=i64
;   andi a5,a7,255
;   select_i128 [a0,a1],[t1,a2],[a3,a4]##condition=a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ori t1, a1, 0
;   addi a7, zero, 0x2a
;   bne a0, a7, 0xc
;   addi a7, zero, 1
;   j 8
;   mv a7, zero
;   andi a5, a7, 0xff
;   beqz a5, 0x10
;   ori a0, t1, 0
;   ori a1, a2, 0
;   j 0xc
;   ori a0, a3, 0
;   ori a1, a4, 0
;   ret

function %select_icmp_i128_i8(i128, i8, i8) -> i8 {
block0(v0: i128, v1: i8, v2: i8):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.i8 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a6,42
;   li a7,0
;   eq a6,[a0,a1],[a6,a7]##ty=i128
;   andi a5,a6,255
;   select_i8 a0,a2,a3##condition=a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   mv a7, zero
;   bne a1, a7, 0x10
;   bne a0, a6, 0xc
;   addi a6, zero, 1
;   j 8
;   mv a6, zero
;   andi a5, a6, 0xff
;   beqz a5, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a3, 0
;   ret

function %select_icmp_i128_i16(i128, i16, i16) -> i16 {
block0(v0: i128, v1: i16, v2: i16):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.i16 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a6,42
;   li a7,0
;   eq a6,[a0,a1],[a6,a7]##ty=i128
;   andi a5,a6,255
;   select_i16 a0,a2,a3##condition=a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   mv a7, zero
;   bne a1, a7, 0x10
;   bne a0, a6, 0xc
;   addi a6, zero, 1
;   j 8
;   mv a6, zero
;   andi a5, a6, 0xff
;   beqz a5, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a3, 0
;   ret

function %select_icmp_i128_i32(i128, i32, i32) -> i32 {
block0(v0: i128, v1: i32, v2: i32):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.i32 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a6,42
;   li a7,0
;   eq a6,[a0,a1],[a6,a7]##ty=i128
;   andi a5,a6,255
;   select_i32 a0,a2,a3##condition=a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   mv a7, zero
;   bne a1, a7, 0x10
;   bne a0, a6, 0xc
;   addi a6, zero, 1
;   j 8
;   mv a6, zero
;   andi a5, a6, 0xff
;   beqz a5, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a3, 0
;   ret

function %select_icmp_i128_i64(i128, i64, i64) -> i64 {
block0(v0: i128, v1: i64, v2: i64):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.i64 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a6,42
;   li a7,0
;   eq a6,[a0,a1],[a6,a7]##ty=i128
;   andi a5,a6,255
;   select_i64 a0,a2,a3##condition=a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   mv a7, zero
;   bne a1, a7, 0x10
;   bne a0, a6, 0xc
;   addi a6, zero, 1
;   j 8
;   mv a6, zero
;   andi a5, a6, 0xff
;   beqz a5, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a3, 0
;   ret

function %select_icmp_i128_i128(i128, i128, i128) -> i128 {
block0(v0: i128, v1: i128, v2: i128):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.i128 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li t4,42
;   li t0,0
;   eq t4,[a0,a1],[t4,t0]##ty=i128
;   andi a7,t4,255
;   select_i128 [a0,a1],[a2,a3],[a4,a5]##condition=a7
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi t4, zero, 0x2a
;   mv t0, zero
;   bne a1, t0, 0x10
;   bne a0, t4, 0xc
;   addi t4, zero, 1
;   j 8
;   mv t4, zero
;   andi a7, t4, 0xff
;   beqz a7, 0x10
;   ori a0, a2, 0
;   ori a1, a3, 0
;   j 0xc
;   ori a0, a4, 0
;   ori a1, a5, 0
;   ret

