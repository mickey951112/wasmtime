test compile precise-output
set unwind_info=false
target riscv64 has_v

function %iadd_swiden_high_low_i32x4(i32x4, i32x4) -> i64x2 {
block0(v0: i32x4, v1: i32x4):
    v2 = swiden_high v0
    v3 = swiden_low v1
    v4 = iadd v2, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v6,v1,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vwadd.vv v8,v6,v3 #avl=2, #vtype=(e32, mf2, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x33, 0x11, 0x3e
;   .byte 0x57, 0x70, 0x71, 0xcd
;   .byte 0x57, 0xa4, 0x61, 0xc6
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %iadd_swiden_high_low_i16x8(i16x8, i16x8) -> i32x4 {
block0(v0: i16x8, v1: i16x8):
    v2 = swiden_high v0
    v3 = swiden_low v1
    v4 = iadd v2, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v6,v1,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vwadd.vv v8,v6,v3 #avl=4, #vtype=(e16, mf2, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x33, 0x12, 0x3e
;   .byte 0x57, 0x70, 0xf2, 0xcc
;   .byte 0x57, 0xa4, 0x61, 0xc6
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %iadd_swiden_high_low_i8x16(i8x16, i8x16) -> i16x8 {
block0(v0: i8x16, v1: i8x16):
    v2 = swiden_high v0
    v3 = swiden_low v1
    v4 = iadd v2, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v6,v1,8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vwadd.vv v8,v6,v3 #avl=8, #vtype=(e8, mf2, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   .byte 0x57, 0x33, 0x14, 0x3e
;   .byte 0x57, 0x70, 0x74, 0xcc
;   .byte 0x57, 0xa4, 0x61, 0xc6
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %iadd_swiden_low_high_i32x4(i32x4, i32x4) -> i64x2 {
block0(v0: i32x4, v1: i32x4):
    v2 = swiden_low v0
    v3 = swiden_high v1
    v4 = iadd v2, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v6,v3,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vwadd.vv v8,v1,v6 #avl=2, #vtype=(e32, mf2, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x33, 0x31, 0x3e
;   .byte 0x57, 0x70, 0x71, 0xcd
;   .byte 0x57, 0x24, 0x13, 0xc6
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %iadd_swiden_low_high_i16x8(i16x8, i16x8) -> i32x4 {
block0(v0: i16x8, v1:i16x8):
    v2 = swiden_low v0
    v3 = swiden_high v1
    v4 = iadd v2, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v6,v3,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vwadd.vv v8,v1,v6 #avl=4, #vtype=(e16, mf2, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x33, 0x32, 0x3e
;   .byte 0x57, 0x70, 0xf2, 0xcc
;   .byte 0x57, 0x24, 0x13, 0xc6
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %iadd_swiden_low_high_i8x16(i8x16, i8x16) -> i16x8 {
block0(v0: i8x16, v1:i8x16):
    v2 = swiden_low v0
    v3 = swiden_high v1
    v4 = iadd v2, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v6,v3,8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vwadd.vv v8,v1,v6 #avl=8, #vtype=(e8, mf2, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   .byte 0x57, 0x33, 0x34, 0x3e
;   .byte 0x57, 0x70, 0x74, 0xcc
;   .byte 0x57, 0x24, 0x13, 0xc6
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

