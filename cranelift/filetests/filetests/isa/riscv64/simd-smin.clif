test compile precise-output
set unwind_info=false
target riscv64 has_v


function %smin_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = smin v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmin.vv v6,v1,v3 #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   .byte 0x57, 0x83, 0x11, 0x16
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_i16x8(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
    v2 = smin v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmin.vv v6,v1,v3 #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x83, 0x11, 0x16
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_i32x4(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
    v2 = smin v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmin.vv v6,v1,v3 #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x83, 0x11, 0x16
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_i64x2(i64x2, i64x2) -> i64x2 {
block0(v0: i64x2, v1: i64x2):
    v2 = smin v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmin.vv v6,v1,v3 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x83, 0x11, 0x16
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_const_i8x16(i8x16) -> i8x16 {
block0(v0: i8x16):
    v1 = iconst.i8 5
    v2 = splat.i8x16 v1
    v3 = smin v0, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   li a2,5
;   vmin.vx v5,v1,a2 #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v5,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi a2, zero, 5
;   .byte 0xd7, 0x42, 0x16, 0x16
;   .byte 0xa7, 0x02, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_const_i16x8(i16x8) -> i16x8 {
block0(v0: i16x8):
    v1 = iconst.i16 -16
    v2 = splat.i16x8 v1
    v3 = smin v0, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   li a2,-16
;   vmin.vx v5,v1,a2 #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v5,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi a2, zero, -0x10
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0xd7, 0x42, 0x16, 0x16
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x02, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_const_i32x4(i32x4) -> i32x4 {
block0(v0: i32x4):
    v1 = iconst.i32 15
    v2 = splat.i32x4 v1
    v3 = smin v0, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   li a2,15
;   vmin.vx v5,v1,a2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v5,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi a2, zero, 0xf
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x42, 0x16, 0x16
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x02, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_const_i64x2(i64x2) -> i64x2 {
block0(v0: i64x2):
    v1 = iconst.i64 -5
    v2 = splat.i64x2 v1
    v3 = smin v2, v0
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   li a2,-5
;   vmin.vx v5,v1,a2 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v5,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi a2, zero, -5
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x42, 0x16, 0x16
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x02, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_splat_i8x16(i8x16,  i8) -> i8x16 {
block0(v0: i8x16, v1: i8):
    v2 = splat.i8x16 v1
    v3 = smin v0, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmin.vx v5,v1,a0 #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v5,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   .byte 0xd7, 0x42, 0x15, 0x16
;   .byte 0xa7, 0x82, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_splat_i16x8(i16x8, i16) -> i16x8 {
block0(v0: i16x8, v1: i16):
    v2 = splat.i16x8 v1
    v3 = smin v0, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmin.vx v5,v1,a0 #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v5,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0xd7, 0x42, 0x15, 0x16
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x82, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_splat_i32x4(i32x4, i32) -> i32x4 {
block0(v0: i32x4, v1: i32):
    v2 = splat.i32x4 v1
    v3 = smin v0, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmin.vx v5,v1,a0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v5,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x42, 0x15, 0x16
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x82, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %smin_splat_i64x2(i64x2, i64) -> i64x2 {
block0(v0: i64x2, v1: i64):
    v2 = splat.i64x2 v1
    v3 = smin v2, v0
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmin.vx v5,v1,a0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v5,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x42, 0x15, 0x16
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x82, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

