test compile precise-output
set unwind_info=false
target riscv64 has_v

function %swidenhigh_i8x16(i8x16) -> i16x8 {
block0(v0: i8x16):
    v1 = swiden_high v0
    return v1
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v4,v1,8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vsext.vf2 v6,v4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   .byte 0x57, 0x32, 0x14, 0x3e
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0xa3, 0x43, 0x4a
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %swidenhigh_i16x8(i16x8) -> i32x4 {
block0(v0: i16x8):
    v1 = swiden_high v0
    return v1
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v4,v1,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vsext.vf2 v6,v4 #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x32, 0x12, 0x3e
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0xa3, 0x43, 0x4a
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %swidenhigh_i32x4(i32x4) -> i64x2 {
block0(v0: i32x4):
    v1 = swiden_high v0
    return v1
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v4,v1,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vsext.vf2 v6,v4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x32, 0x11, 0x3e
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xa3, 0x43, 0x4a
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %swidenhigh_twice_i8x16(i8x16) -> i32x4 {
block0(v0: i8x16):
    v1 = swiden_high v0
    v2 = swiden_high v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v4,v1,12 #avl=16, #vtype=(e8, m1, ta, ma)
;   vsext.vf4 v6,v4 #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   .byte 0x57, 0x32, 0x16, 0x3e
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0xa3, 0x42, 0x4a
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %swidenhigh_twice_i16x8(i16x8) -> i64x2 {
block0(v0: i16x8):
    v1 = swiden_high v0
    v2 = swiden_high v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v4,v1,6 #avl=8, #vtype=(e16, m1, ta, ma)
;   vsext.vf4 v6,v4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x32, 0x13, 0x3e
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xa3, 0x42, 0x4a
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %swidenhigh_triple_i8x16(i8x16) -> i64x2 {
block0(v0: i8x16):
    v1 = swiden_high v0
    v2 = swiden_high v1
    v3 = swiden_high v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v4,v1,14 #avl=16, #vtype=(e8, m1, ta, ma)
;   vsext.vf8 v6,v4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   .byte 0x57, 0x32, 0x17, 0x3e
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xa3, 0x41, 0x4a
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

