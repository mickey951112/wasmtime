test compile precise-output
set unwind_info=false
target riscv64

function %f() -> i8 {
block0:
  v0 = iconst.i8 -1
  return v0
}

; VCode:
; block0:
;   li a0,-1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a0, zero, -1
;   ret

function %f() -> i16 {
block0:
  v0 = iconst.i16 0
  return v0
}

; VCode:
; block0:
;   li a0,0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   mv a0, zero
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0
  return v0
}

; VCode:
; block0:
;   li a0,0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   mv a0, zero
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff
  return v0
}

; VCode:
; block0:
;   lui t1,16
;   addi a0,t1,4095
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   lui t1, 0x10
;   addi a0, t1, -1
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff0000
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xffff0000
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0x00, 0x00, 0xff, 0xff
;   .byte 0x00, 0x00, 0x00, 0x00
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff00000000
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xffff00000000
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00
;   .byte 0xff, 0xff, 0x00, 0x00
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff000000000000
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xffff000000000000
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00
;   .byte 0x00, 0x00, 0xff, 0xff
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffffffffffff
  return v0
}

; VCode:
; block0:
;   li a0,-1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a0, zero, -1
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffffffff0000
  return v0
}

; VCode:
; block0:
;   lui a0,1048560
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   lui a0, 0xffff0
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffff0000ffff
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xffffffff0000ffff
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0xff, 0xff, 0x00, 0x00
;   .byte 0xff, 0xff, 0xff, 0xff
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff0000ffffffff
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xffff0000ffffffff
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0xff, 0xff, 0xff, 0xff
;   .byte 0x00, 0x00, 0xff, 0xff
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x0000ffffffffffff
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xffffffffffff
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0xff, 0xff, 0xff, 0xff
;   .byte 0xff, 0xff, 0x00, 0x00
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xf34bf0a31212003a ;; random digits
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xf34bf0a31212003a
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0x3a, 0x00, 0x12, 0x12
;   .byte 0xa3, 0xf0, 0x4b, 0xf3
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x12e900001ef40000 ;; random digits with 2 clear half words
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0x12e900001ef40000
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0x00, 0x00, 0xf4, 0x1e
;   .byte 0x00, 0x00, 0xe9, 0x12
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x12e9ffff1ef4ffff ;; random digits with 2 full half words
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0x12e9ffff1ef4ffff
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0xff, 0xff, 0xf4, 0x1e
;   .byte 0xff, 0xff, 0xe9, 0x12
;   ret

function %f() -> i32 {
block0:
  v0 = iconst.i32 -1
  return v0
}

; VCode:
; block0:
;   li a0,-1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a0, zero, -1
;   ret

function %f() -> i32 {
block0:
  v0 = iconst.i32 0xfffffff7
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xfffffff7
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0xf7, 0xff, 0xff, 0xff
;   .byte 0x00, 0x00, 0x00, 0x00
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xfffffff7
  return v0
}

; VCode:
; block0:
;   auipc a0,0; ld a0,12(a0); j 12; .8byte 0xfffffff7
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0xf7, 0xff, 0xff, 0xff
;   .byte 0x00, 0x00, 0x00, 0x00
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xfffffffffffffff7
  return v0
}

; VCode:
; block0:
;   li a0,-9
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a0, zero, -9
;   ret

function %f() -> f64 {
block0:
  v0 = f64const 0x1.0
  return v0
}

; VCode:
; block0:
;   auipc t1,0; ld t1,12(t1); j 12; .8byte 0x3ff0000000000000
;   fmv.d.x fa0,t1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc t1, 0
;   ld t1, 0xc(t1)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00
;   .byte 0x00, 0x00, 0xf0, 0x3f
;   fmv.d.x fa0, t1
;   ret

function %f() -> f32 {
block0:
  v0 = f32const 0x5.0
  return v0
}

; VCode:
; block0:
;   lui t1,264704
;   fmv.w.x fa0,t1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   lui t1, 0x40a00
;   fmv.w.x fa0, t1
;   ret

function %f() -> f64 {
block0:
  v0 = f64const 0x32.0
  return v0
}

; VCode:
; block0:
;   auipc t1,0; ld t1,12(t1); j 12; .8byte 0x4049000000000000
;   fmv.d.x fa0,t1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc t1, 0
;   ld t1, 0xc(t1)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00
;   .byte 0x00, 0x00, 0x49, 0x40
;   fmv.d.x fa0, t1
;   ret

function %f() -> f32 {
block0:
  v0 = f32const 0x32.0
  return v0
}

; VCode:
; block0:
;   lui t1,271488
;   fmv.w.x fa0,t1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   lui t1, 0x42480
;   fmv.w.x fa0, t1
;   ret

function %f() -> f64 {
block0:
  v0 = f64const 0x0.0
  return v0
}

; VCode:
; block0:
;   li t1,0
;   fmv.d.x fa0,t1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   mv t1, zero
;   fmv.d.x fa0, t1
;   ret

function %f() -> f32 {
block0:
  v0 = f32const 0x0.0
  return v0
}

; VCode:
; block0:
;   li t1,0
;   fmv.w.x fa0,t1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   mv t1, zero
;   fmv.w.x fa0, t1
;   ret

function %f() -> f64 {
block0:
  v0 = f64const -0x10.0
  return v0
}

; VCode:
; block0:
;   auipc t1,0; ld t1,12(t1); j 12; .8byte 0xc030000000000000
;   fmv.d.x fa0,t1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc t1, 0
;   ld t1, 0xc(t1)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00
;   .byte 0x00, 0x00, 0x30, 0xc0
;   fmv.d.x fa0, t1
;   ret

function %f() -> f32 {
block0:
  v0 = f32const -0x10.0
  return v0
}

; VCode:
; block0:
;   auipc t1,0; ld t1,12(t1); j 8; .4byte 0xc1800000
;   fmv.w.x fa0,t1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   auipc t1, 0
;   lwu t1, 0xc(t1)
;   j 8
;   .byte 0x00, 0x00, 0x80, 0xc1
;   fmv.w.x fa0, t1
;   ret

