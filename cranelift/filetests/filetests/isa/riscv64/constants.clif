test compile precise-output
set unwind_info=false
target riscv64

function %f() -> b8 {
block0:
  v0 = bconst.b8 true
  return v0
}

; block0:
;   li a0,-1
;   ret

function %f() -> b16 {
block0:
  v0 = bconst.b16 false
  return v0
}

; block0:
;   li a0,0
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0
  return v0
}

; block0:
;   li a0,0
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff
  return v0
}

; block0:
;   lui a0,16
;   addi a0,a0,4095
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff0000
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0xffff0000
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff00000000
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0xffff00000000
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff000000000000
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0xffff000000000000
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffffffffffff
  return v0
}

; block0:
;   li a0,-1
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffffffff0000
  return v0
}

; block0:
;   lui a0,1048560
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffff0000ffff
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0xffffffff0000ffff
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff0000ffffffff
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0xffff0000ffffffff
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x0000ffffffffffff
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0xffffffffffff
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xf34bf0a31212003a ;; random digits
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0xf34bf0a31212003a
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x12e900001ef40000 ;; random digits with 2 clear half words
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0x12e900001ef40000
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x12e9ffff1ef4ffff ;; random digits with 2 full half words
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0x12e9ffff1ef4ffff
;   ret

function %f() -> i32 {
block0:
  v0 = iconst.i32 -1
  return v0
}

; block0:
;   li a0,-1
;   ret

function %f() -> i32 {
block0:
  v0 = iconst.i32 0xfffffff7
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0xfffffff7
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xfffffff7
  return v0
}

; block0:
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .8byte 0xfffffff7
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xfffffffffffffff7
  return v0
}

; block0:
;   li a0,-9
;   ret

function %f() -> f64 {
block0:
  v0 = f64const 0x1.0
  return v0
}

; block0:
;   auipc t2,0
;   ld t2,12(t2)
;   j 12
;   .8byte 0x3ff0000000000000
;   fmv.d.x fa0,t2
;   ret

function %f() -> f32 {
block0:
  v0 = f32const 0x5.0
  return v0
}

; block0:
;   lui t2,264704
;   fmv.w.x fa0,t2
;   ret

function %f() -> f64 {
block0:
  v0 = f64const 0x32.0
  return v0
}

; block0:
;   auipc t2,0
;   ld t2,12(t2)
;   j 12
;   .8byte 0x4049000000000000
;   fmv.d.x fa0,t2
;   ret

function %f() -> f32 {
block0:
  v0 = f32const 0x32.0
  return v0
}

; block0:
;   lui t2,271488
;   fmv.w.x fa0,t2
;   ret

function %f() -> f64 {
block0:
  v0 = f64const 0x0.0
  return v0
}

; block0:
;   li t2,0
;   fmv.d.x fa0,t2
;   ret

function %f() -> f32 {
block0:
  v0 = f32const 0x0.0
  return v0
}

; block0:
;   li t2,0
;   fmv.w.x fa0,t2
;   ret

function %f() -> f64 {
block0:
  v0 = f64const -0x10.0
  return v0
}

; block0:
;   auipc t2,0
;   ld t2,12(t2)
;   j 12
;   .8byte 0xc030000000000000
;   fmv.d.x fa0,t2
;   ret

function %f() -> f32 {
block0:
  v0 = f32const -0x10.0
  return v0
}

; block0:
;   auipc t2,0
;   lwu t2,12(t2)
;   j 8
;   .4byte 0xc1800000
;   fmv.w.x fa0,t2
;   ret

