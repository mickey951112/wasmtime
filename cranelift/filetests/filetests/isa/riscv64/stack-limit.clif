test compile precise-output
set unwind_info=false
set enable_probestack=true
target riscv64

function %foo() {
block0:
    return
}

; VCode:
; block0:
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ret

function %stack_limit_leaf_zero(i64 stack_limit) {
block0(v0: i64):
    return
}

; VCode:
; block0:
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ret

function %stack_limit_gv_leaf_zero(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
block0(v0: i64):
    return
}

; VCode:
; block0:
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ret

function %stack_limit_call_zero(i64 stack_limit) {
    fn0 = %foo()
block0(v0: i64):
    call fn0()
    return
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   trap_ifc stk_ovf##(sp ult a0)
; block0:
;   load_sym t2,%foo+0
;   callind t2
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
;   bgeu sp, a0, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: stk_ovf
; block1: ; offset 0x18
;   auipc t2, 0
;   ld t2, 0xc(t2)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %foo 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   jalr t2
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %stack_limit_gv_call_zero(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
    fn0 = %foo()
block0(v0: i64):
    call fn0()
    return
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   ld t6,0(a0)
;   ld t6,4(t6)
;   trap_ifc stk_ovf##(sp ult t6)
; block0:
;   load_sym t2,%foo+0
;   callind t2
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
;   ld t6, 0(a0)
;   ld t6, 4(t6)
;   bgeu sp, t6, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: stk_ovf
; block1: ; offset 0x20
;   auipc t2, 0
;   ld t2, 0xc(t2)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %foo 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   jalr t2
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %stack_limit(i64 stack_limit) {
    ss0 = explicit_slot 168
block0(v0: i64):
    return
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   addi t6,a0,176
;   trap_ifc stk_ovf##(sp ult t6)
;   add sp,-176
; block0:
;   add sp,+176
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
;   addi t6, a0, 0xb0
;   bgeu sp, t6, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: stk_ovf
;   addi sp, sp, -0xb0
; block1: ; offset 0x20
;   addi sp, sp, 0xb0
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %huge_stack_limit(i64 stack_limit) {
    ss0 = explicit_slot 400000
block0(v0: i64):
    return
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   trap_ifc stk_ovf##(sp ult a0)
;   lui t5,98
;   addi t5,t5,2688
;   add t6,t5,a0
;   trap_ifc stk_ovf##(sp ult t6)
;   lui a0,98
;   addi a0,a0,2688
;   call %Probestack
;   add sp,-400000
; block0:
;   add sp,+400000
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
;   bgeu sp, a0, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: stk_ovf
;   lui t5, 0x62
;   addi t5, t5, -0x580
;   add t6, t5, a0
;   bgeu sp, t6, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: stk_ovf
;   lui a0, 0x62
;   addi a0, a0, -0x580
;   auipc t5, 0
;   ld t5, 0xc(t5)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %Probestack 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   jalr t5
;   lui t6, 0xfff9e
;   addi t6, t6, 0x580
;   add sp, t6, sp
; block1: ; offset 0x58
;   lui t6, 0x62
;   addi t6, t6, -0x580
;   add sp, t6, sp
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %limit_preamble(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
    ss0 = explicit_slot 20
block0(v0: i64):
    return
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   ld t6,0(a0)
;   ld t6,4(t6)
;   addi t6,t6,32
;   trap_ifc stk_ovf##(sp ult t6)
;   add sp,-32
; block0:
;   add sp,+32
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
;   ld t6, 0(a0)
;   ld t6, 4(t6)
;   addi t6, t6, 0x20
;   bgeu sp, t6, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: stk_ovf
;   addi sp, sp, -0x20
; block1: ; offset 0x28
;   addi sp, sp, 0x20
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %limit_preamble_huge(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
    ss0 = explicit_slot 400000
block0(v0: i64):
    return
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   ld t6,0(a0)
;   ld t6,4(t6)
;   trap_ifc stk_ovf##(sp ult t6)
;   lui t5,98
;   addi t5,t5,2688
;   add t6,t5,t6
;   trap_ifc stk_ovf##(sp ult t6)
;   lui a0,98
;   addi a0,a0,2688
;   call %Probestack
;   add sp,-400000
; block0:
;   add sp,+400000
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
;   ld t6, 0(a0)
;   ld t6, 4(t6)
;   bgeu sp, t6, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: stk_ovf
;   lui t5, 0x62
;   addi t5, t5, -0x580
;   add t6, t5, t6
;   bgeu sp, t6, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: stk_ovf
;   lui a0, 0x62
;   addi a0, a0, -0x580
;   auipc t5, 0
;   ld t5, 0xc(t5)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %Probestack 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   jalr t5
;   lui t6, 0xfff9e
;   addi t6, t6, 0x580
;   add sp, t6, sp
; block1: ; offset 0x60
;   lui t6, 0x62
;   addi t6, t6, -0x580
;   add sp, t6, sp
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %limit_preamble_huge_offset(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0+400000
    stack_limit = gv1
    ss0 = explicit_slot 20
block0(v0: i64):
    return
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   ld t6,400000(a0)
;   addi t6,t6,32
;   trap_ifc stk_ovf##(sp ult t6)
;   add sp,-32
; block0:
;   add sp,+32
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
;   auipc t6, 0
;   ld t6, 0xc(t6)
;   j 0xc
;   .byte 0x80, 0x1a, 0x06, 0x00
;   .byte 0x00, 0x00, 0x00, 0x00
;   add t6, t6, a0
;   ld t6, 0(t6)
;   addi t6, t6, 0x20
;   bgeu sp, t6, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: stk_ovf
;   addi sp, sp, -0x20
; block1: ; offset 0x3c
;   addi sp, sp, 0x20
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

