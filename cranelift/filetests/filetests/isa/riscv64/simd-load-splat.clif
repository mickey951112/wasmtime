test compile precise-output
set unwind_info=false
target riscv64 has_v

function %load_splat_i8x16(i64) -> i8x16 {
block0(v0: i64):
    v1 = load.i8 v0
    v2 = splat.i8x16 v1
    return v2
}

; VCode:
; block0:
;   lb a2,0(a0)
;   vmv.v.x v4,a2 #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v4,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lb a2, 0(a0)
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x57, 0x42, 0x06, 0x5e
;   .byte 0x27, 0x82, 0x05, 0x02
;   ret

function %load_splat_i16x8(i64) -> i16x8 {
block0(v0: i64):
    v1 = load.i16 v0
    v2 = splat.i16x8 v1
    return v2
}

; VCode:
; block0:
;   lh a2,0(a0)
;   vmv.v.x v4,a2 #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v4,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lh a2, 0(a0)
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x42, 0x06, 0x5e
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x82, 0x05, 0x02
;   ret

function %load_splat_i32x4(i64) -> i32x4 {
block0(v0: i64):
    v1 = load.i32 v0
    v2 = splat.i32x4 v1
    return v2
}

; VCode:
; block0:
;   lw a2,0(a0)
;   vmv.v.x v4,a2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v4,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lw a2, 0(a0)
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x42, 0x06, 0x5e
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x82, 0x05, 0x02
;   ret

function %load_splat_i64x2(i64) -> i64x2 {
block0(v0: i64):
    v1 = load.i64 v0
    v2 = splat.i64x2 v1
    return v2
}

; VCode:
; block0:
;   ld a2,0(a0)
;   vmv.v.x v4,a2 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v4,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ld a2, 0(a0)
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x42, 0x06, 0x5e
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x82, 0x05, 0x02
;   ret

function %load_splat_f32x4(i64) -> f32x4 {
block0(v0: i64):
    v1 = load.f32 v0
    v2 = splat.f32x4 v1
    return v2
}

; VCode:
; block0:
;   flw ft4,0(a0)
;   vfmv.v.f v4,ft4 #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v4,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   flw ft4, 0(a0)
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x52, 0x02, 0x5e
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x82, 0x05, 0x02
;   ret

function %load_splat_f64x2(i64) -> f64x2 {
block0(v0: i64):
    v1 = load.f64 v0
    v2 = splat.f64x2 v1
    return v2
}

; VCode:
; block0:
;   fld ft4,0(a0)
;   vfmv.v.f v4,ft4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v4,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fld ft4, 0(a0)
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x52, 0x02, 0x5e
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x82, 0x05, 0x02
;   ret

