test compile precise-output
set unwind_info=false
target riscv64

function %f_u_8_64(i8) -> i64 {
block0(v0: i8):
  v1 = uextend.i64 v0
  return v1
}

; VCode:
; block0:
;   uext.b a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   andi a0, a0, 0xff
;   ret

function %f_u_8_32(i8) -> i32 {
block0(v0: i8):
  v1 = uextend.i32 v0
  return v1
}

; VCode:
; block0:
;   uext.b a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   andi a0, a0, 0xff
;   ret

function %f_u_8_16(i8) -> i16 {
block0(v0: i8):
  v1 = uextend.i16 v0
  return v1
}

; VCode:
; block0:
;   uext.b a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   andi a0, a0, 0xff
;   ret

function %f_s_8_64(i8) -> i64 {
block0(v0: i8):
  v1 = sextend.i64 v0
  return v1
}

; VCode:
; block0:
;   sext.b a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a0, a0, 0x38
;   srai a0, a0, 0x38
;   ret

function %f_s_8_32(i8) -> i32 {
block0(v0: i8):
  v1 = sextend.i32 v0
  return v1
}

; VCode:
; block0:
;   sext.b a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a0, a0, 0x38
;   srai a0, a0, 0x38
;   ret

function %f_s_8_16(i8) -> i16 {
block0(v0: i8):
  v1 = sextend.i16 v0
  return v1
}

; VCode:
; block0:
;   sext.b a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a0, a0, 0x38
;   srai a0, a0, 0x38
;   ret

function %f_u_16_64(i16) -> i64 {
block0(v0: i16):
  v1 = uextend.i64 v0
  return v1
}

; VCode:
; block0:
;   uext.h a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a0, a0, 0x30
;   srli a0, a0, 0x30
;   ret

function %f_u_16_32(i16) -> i32 {
block0(v0: i16):
  v1 = uextend.i32 v0
  return v1
}

; VCode:
; block0:
;   uext.h a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a0, a0, 0x30
;   srli a0, a0, 0x30
;   ret

function %f_s_16_64(i16) -> i64 {
block0(v0: i16):
  v1 = sextend.i64 v0
  return v1
}

; VCode:
; block0:
;   sext.h a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a0, a0, 0x30
;   srai a0, a0, 0x30
;   ret

function %f_s_16_32(i16) -> i32 {
block0(v0: i16):
  v1 = sextend.i32 v0
  return v1
}

; VCode:
; block0:
;   sext.h a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a0, a0, 0x30
;   srai a0, a0, 0x30
;   ret

function %f_u_32_64(i32) -> i64 {
block0(v0: i32):
  v1 = uextend.i64 v0
  return v1
}

; VCode:
; block0:
;   uext.w a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a0, a0, 0x20
;   srli a0, a0, 0x20
;   ret

function %f_s_32_64(i32) -> i64 {
block0(v0: i32):
  v1 = sextend.i64 v0
  return v1
}

; VCode:
; block0:
;   sext.w a0,a0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli a0, a0, 0x20
;   srai a0, a0, 0x20
;   ret

