test compile precise-output
set unwind_info=false
target riscv64

function %f5(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = sextend.i64 v1
  v3 = iadd.i64 v0, v2
  v4 = load.i32 v3
  return v4
}

; block0:
;   sext.w a2,a1
;   add a2,a0,a2
;   lw a0,0(a2)
;   ret

function %f6(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = sextend.i64 v1
  v3 = iadd.i64 v2, v0
  v4 = load.i32 v3
  return v4
}

; block0:
;   sext.w a2,a1
;   add a2,a2,a0
;   lw a0,0(a2)
;   ret

function %f7(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = uextend.i64 v0
  v3 = uextend.i64 v1
  v4 = iadd.i64 v2, v3
  v5 = load.i32 v4
  return v5
}

; block0:
;   uext.w a3,a0
;   uext.w a4,a1
;   add a3,a3,a4
;   lw a0,0(a3)
;   ret

function %f8(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = sextend.i64 v1
  v3 = iconst.i64 32
  v4 = iadd.i64 v2, v3
  v5 = iadd.i64 v4, v0
  v6 = iadd.i64 v5, v5
  v7 = load.i32 v6+4
  return v7
}

; block0:
;   sext.w a4,a1
;   addi a4,a4,32
;   add a4,a4,a0
;   add a4,a4,a4
;   lw a0,4(a4)
;   ret

function %f9(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i64 48
  v4 = iadd.i64 v0, v1
  v5 = iadd.i64 v4, v2
  v6 = iadd.i64 v5, v3
  v7 = load.i32 v6
  return v7
}

; block0:
;   add a4,a0,a1
;   add a4,a4,a2
;   addi a4,a4,48
;   lw a0,0(a4)
;   ret

function %f10(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i64 4100
  v4 = iadd.i64 v0, v1
  v5 = iadd.i64 v4, v2
  v6 = iadd.i64 v5, v3
  v7 = load.i32 v6
  return v7
}

; block0:
;   add a5,a0,a1
;   add a5,a5,a2
;   lui a4,1
;   addi a4,a4,4
;   add a7,a5,a4
;   lw a0,0(a7)
;   ret

function %f10() -> i32 {
block0:
  v1 = iconst.i64 1234
  v2 = load.i32 v1
  return v2
}

; block0:
;   li t0,1234
;   lw a0,0(t0)
;   ret

function %f11(i64) -> i32 {
block0(v0: i64):
  v1 = iconst.i64 8388608 ;; Imm12: 0x800 << 12
  v2 = iadd.i64 v0, v1
  v3 = load.i32 v2
  return v3
}

; block0:
;   lui a1,2048
;   add a2,a0,a1
;   lw a0,0(a2)
;   ret

function %f12(i64) -> i32 {
block0(v0: i64):
  v1 = iconst.i64 -4
  v2 = iadd.i64 v0, v1
  v3 = load.i32 v2
  return v3
}

; block0:
;   addi a0,a0,-4
;   lw a0,0(a0)
;   ret

function %f13(i64) -> i32 {
block0(v0: i64):
  v1 = iconst.i64 1000000000
  v2 = iadd.i64 v0, v1
  v3 = load.i32 v2
  return v3
}

; block0:
;   lui a1,244141
;   addi a1,a1,2560
;   add a3,a0,a1
;   lw a0,0(a3)
;   ret

function %f14(i32) -> i32 {
block0(v0: i32):
  v1 = sextend.i64 v0
  v2 = load.i32 v1
  return v2
}

; block0:
;   sext.w a0,a0
;   lw a0,0(a0)
;   ret

function %f15(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = sextend.i64 v0
  v3 = sextend.i64 v1
  v4 = iadd.i64 v2, v3
  v5 = load.i32 v4
  return v5
}

; block0:
;   sext.w a3,a0
;   sext.w a4,a1
;   add a3,a3,a4
;   lw a0,0(a3)
;   ret

function %f18(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i32 -4098
  v6 = uextend.i64 v3
  v5 = sload16.i32 v6+0
  return v5
}

; block0:
;   lui a2,1048575
;   addi a2,a2,4094
;   uext.w a5,a2
;   lh a0,0(a5)
;   ret

function %f19(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i32 4098
  v6 = uextend.i64 v3
  v5 = sload16.i32 v6+0
  return v5
}

; block0:
;   lui a2,1
;   addi a2,a2,2
;   uext.w a5,a2
;   lh a0,0(a5)
;   ret

function %f20(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i32 -4098
  v6 = sextend.i64 v3
  v5 = sload16.i32 v6+0
  return v5
}

; block0:
;   lui a2,1048575
;   addi a2,a2,4094
;   sext.w a5,a2
;   lh a0,0(a5)
;   ret

function %f21(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i32 4098
  v6 = sextend.i64 v3
  v5 = sload16.i32 v6+0
  return v5
}

; block0:
;   lui a2,1
;   addi a2,a2,2
;   sext.w a5,a2
;   lh a0,0(a5)
;   ret

function %i128(i64) -> i128 {
block0(v0: i64):
  v1 = load.i128 v0
  store.i128 v1, v0
  return v1
}

; block0:
;   ld t2,0(a0)
;   mv a2,t2
;   ld a1,8(a0)
;   mv a3,a2
;   sd a3,0(a0)
;   sd a1,8(a0)
;   mv a0,a2
;   ret

function %i128_imm_offset(i64) -> i128 {
block0(v0: i64):
  v1 = load.i128 v0+16
  store.i128 v1, v0+16
  return v1
}

; block0:
;   ld t2,16(a0)
;   mv a2,t2
;   ld a1,24(a0)
;   mv a3,a2
;   sd a3,16(a0)
;   sd a1,24(a0)
;   mv a0,a2
;   ret

function %i128_imm_offset_large(i64) -> i128 {
block0(v0: i64):
  v1 = load.i128 v0+504
  store.i128 v1, v0+504
  return v1
}

; block0:
;   ld t2,504(a0)
;   mv a2,t2
;   ld a1,512(a0)
;   mv a3,a2
;   sd a3,504(a0)
;   sd a1,512(a0)
;   mv a0,a2
;   ret

function %i128_imm_offset_negative_large(i64) -> i128 {
block0(v0: i64):
  v1 = load.i128 v0-512
  store.i128 v1, v0-512
  return v1
}

; block0:
;   ld t2,-512(a0)
;   mv a2,t2
;   ld a1,-504(a0)
;   mv a3,a2
;   sd a3,-512(a0)
;   sd a1,-504(a0)
;   mv a0,a2
;   ret

function %i128_add_offset(i64) -> i128 {
block0(v0: i64):
  v1 = iadd_imm v0, 32
  v2 = load.i128 v1
  store.i128 v2, v1
  return v2
}

; block0:
;   addi a2,a0,32
;   ld a0,0(a2)
;   ld a1,8(a2)
;   sd a0,0(a2)
;   sd a1,8(a2)
;   ret

function %i128_32bit_sextend_simple(i32) -> i128 {
block0(v0: i32):
  v1 = sextend.i64 v0
  v2 = load.i128 v1
  store.i128 v2, v1
  return v2
}

; block0:
;   sext.w a2,a0
;   ld a0,0(a2)
;   ld a1,8(a2)
;   sd a0,0(a2)
;   sd a1,8(a2)
;   ret

function %i128_32bit_sextend(i64, i32) -> i128 {
block0(v0: i64, v1: i32):
  v2 = sextend.i64 v1
  v3 = iadd.i64 v0, v2
  v4 = iadd_imm.i64 v3, 24
  v5 = load.i128 v4
  store.i128 v5, v4
  return v5
}

; block0:
;   sext.w a4,a1
;   add a4,a0,a4
;   addi a4,a4,24
;   ld a0,0(a4)
;   ld a1,8(a4)
;   sd a0,0(a4)
;   sd a1,8(a4)
;   ret

