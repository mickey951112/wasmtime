test compile precise-output
set unwind_info=false
target riscv64 has_v has_zvl2048b



function %iadd_i64x4(i64x4, i64x4) -> i64x4 {
block0(v0:i64x4, v1:i64x4):
    v2 = iadd v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle16.v v1,16(fp) #avl=16, #vtype=(e16, m1, ta, ma)
;   vle16.v v3,48(fp) #avl=16, #vtype=(e16, m1, ta, ma)
;   vadd.vv v6,v1,v3 #avl=4, #vtype=(e64, m1, ta, ma)
;   vse16.v v6,0(a0) #avl=16, #vtype=(e16, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x88, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0xd0, 0x0f, 0x02
;   addi t6, s0, 0x30
;   .byte 0x87, 0xd1, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x82, 0xcd
;   .byte 0x57, 0x83, 0x11, 0x02
;   .byte 0x57, 0x70, 0x88, 0xcc
;   .byte 0x27, 0x53, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %iadd_i64x8(i64x8, i64x8) -> i64x8 {
block0(v0:i64x8, v1:i64x8):
    v2 = iadd v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle32.v v1,16(fp) #avl=16, #vtype=(e32, m1, ta, ma)
;   vle32.v v3,80(fp) #avl=16, #vtype=(e32, m1, ta, ma)
;   vadd.vv v6,v1,v3 #avl=8, #vtype=(e64, m1, ta, ma)
;   vse32.v v6,0(a0) #avl=16, #vtype=(e32, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcd
;   addi t6, s0, 0x10
;   .byte 0x87, 0xe0, 0x0f, 0x02
;   addi t6, s0, 0x50
;   .byte 0x87, 0xe1, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x84, 0xcd
;   .byte 0x57, 0x83, 0x11, 0x02
;   .byte 0x57, 0x70, 0x08, 0xcd
;   .byte 0x27, 0x63, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

