test simple_preopt
target aarch64
target x86_64

function %icmp_to_brif_false_fold(i32) -> i32 {
block0(v0: i32):
    v1 = icmp_imm eq v0, 0
    brif v1, block1, block2
block1:
    v3 = iconst.i32 1
    return v3
block2:
    v4 = iconst.i32 2
    return v4
}
; sameln: function %icmp_to_brif_false_fold
; nextln: block0(v0: i32):
; nextln:     v1 = icmp_imm eq v0, 0
; nextln:     brif v0, block2, block1
; nextln: 
; nextln: block1:
; nextln:     v3 = iconst.i32 1
; nextln:     return v3
; nextln: 
; nextln: block2:
; nextln:     v4 = iconst.i32 2
; nextln:     return v4
; nextln: }

function %icmp_to_brif_false_inverted_fold(i32) -> i32 {
block0(v0: i32):
    v1 = icmp_imm ne v0, 0
    brif v1, block2, block1
block1:
    v3 = iconst.i32 1
    return v3
block2:
    v4 = iconst.i32 2
    return v4
}
; sameln: function %icmp_to_brif_false_inverted_fold
; nextln: block0(v0: i32):
; nextln:     v1 = icmp_imm ne v0, 0
; nextln:     brif v0, block2, block1
; nextln: 
; nextln: block1:
; nextln:     v3 = iconst.i32 1
; nextln:     return v3
; nextln: 
; nextln: block2:
; nextln:     v4 = iconst.i32 2
; nextln:     return v4
; nextln: }
