// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/clif.isle

#![allow(dead_code, unreachable_code, unreachable_patterns)]
#![allow(unused_imports, unused_variables, non_snake_case)]

use super::*;  // Pulls in all external types.

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn value_list_slice(&mut self, arg0: &ValueList) -> (ValueSlice,);
    fn unwrap_head_value_list_1(&mut self, arg0: &ValueList) -> (Value, ValueSlice,);
    fn unwrap_head_value_list_2(&mut self, arg0: &ValueList) -> (Value, Value, ValueSlice,);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> (ValueArray2,);
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value,);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> (ValueArray3,);
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value,);
}
